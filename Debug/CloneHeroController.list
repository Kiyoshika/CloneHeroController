
CloneHeroController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d0  080061d0  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d8  080061d8  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080061e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000158  08006338  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  08006338  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ef2  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a68  00000000  00000000  0003107a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00033ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  00034590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d72  00000000  00000000  00034f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc17  00000000  00000000  0004cc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086da2  00000000  00000000  0005a899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e163b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a34  00000000  00000000  000e1690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000158 	.word	0x20000158
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006164 	.word	0x08006164

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000015c 	.word	0x2000015c
 80001d4:	08006164 	.word	0x08006164

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <get_key_map>:
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;
uint8_t HID_buffer[8] = { 0 };

uint8_t get_key_map(char key)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
	// only map D, F, J, K, L keys (for clone hero)
	switch (key)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	3b64      	subs	r3, #100	; 0x64
 80004de:	2b08      	cmp	r3, #8
 80004e0:	d81e      	bhi.n	8000520 <get_key_map+0x50>
 80004e2:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <get_key_map+0x18>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	0800050d 	.word	0x0800050d
 80004ec:	08000521 	.word	0x08000521
 80004f0:	08000511 	.word	0x08000511
 80004f4:	08000521 	.word	0x08000521
 80004f8:	08000521 	.word	0x08000521
 80004fc:	08000521 	.word	0x08000521
 8000500:	08000515 	.word	0x08000515
 8000504:	08000519 	.word	0x08000519
 8000508:	0800051d 	.word	0x0800051d
	{
		case 'd':
			return 0x07;
 800050c:	2307      	movs	r3, #7
 800050e:	e008      	b.n	8000522 <get_key_map+0x52>
		case 'f':
			return 0x09;
 8000510:	2309      	movs	r3, #9
 8000512:	e006      	b.n	8000522 <get_key_map+0x52>
		case 'j':
			return 0x0D;
 8000514:	230d      	movs	r3, #13
 8000516:	e004      	b.n	8000522 <get_key_map+0x52>
		case 'k':
			return 0x0E;
 8000518:	230e      	movs	r3, #14
 800051a:	e002      	b.n	8000522 <get_key_map+0x52>
		case 'l':
			return 0x0F;
 800051c:	230f      	movs	r3, #15
 800051e:	e000      	b.n	8000522 <get_key_map+0x52>
	}

	return 0x00;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <actuate_key>:
void actuate_key(USBD_HandleTypeDef* usb_handle, uint8_t* HID_buffer, size_t buffer_index, char key)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	70fb      	strb	r3, [r7, #3]
	size_t calculated_idx = 2 + buffer_index;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3302      	adds	r3, #2
 8000542:	617b      	str	r3, [r7, #20]
	HID_buffer[calculated_idx] = get_key_map(key);
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	18d4      	adds	r4, r2, r3
 800054a:	78fb      	ldrb	r3, [r7, #3]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffbf 	bl	80004d0 <get_key_map>
 8000552:	4603      	mov	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]
	USBD_HID_SendReport(usb_handle, HID_buffer, 8);
 8000556:	2208      	movs	r2, #8
 8000558:	68b9      	ldr	r1, [r7, #8]
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	f003 ffe2 	bl	8004524 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000560:	2032      	movs	r0, #50	; 0x32
 8000562:	f000 faab 	bl	8000abc <HAL_Delay>
}
 8000566:	bf00      	nop
 8000568:	371c      	adds	r7, #28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd90      	pop	{r4, r7, pc}

0800056e <release_key>:

void release_key(USBD_HandleTypeDef* usb_handle, uint8_t* HID_buffer, size_t buffer_index)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
	size_t calculated_idx = 2 + buffer_index;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3302      	adds	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
	HID_buffer[calculated_idx] = 0x00;
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	4413      	add	r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(usb_handle, HID_buffer, 8);
 800058a:	2208      	movs	r2, #8
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f003 ffc8 	bl	8004524 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	; 0x32
 8000596:	f000 fa91 	bl	8000abc <HAL_Delay>
}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fa15 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8b5 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f91b 	bl	80007ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b6:	f005 f97b 	bl	80058b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  bool pressed_keys[5] = {false, false, false, false, false};
 80005ba:	463b      	mov	r3, r7
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	711a      	strb	r2, [r3, #4]
  {
	  // writing logic in such a way that if one button is release but user is still holding down another,
	  // that other button will still be actuated. This is mainly for handling long notes/hammer ons

	  // actuate keys
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1)
 80005c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c6:	4851      	ldr	r0, [pc, #324]	; (800070c <main+0x168>)
 80005c8:	f000 fd32 	bl	8001030 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d107      	bne.n	80005e2 <main+0x3e>
	  {
		  pressed_keys[0] = true;
 80005d2:	2301      	movs	r3, #1
 80005d4:	703b      	strb	r3, [r7, #0]
		  actuate_key(&hUsbDeviceFS, HID_buffer, 0, 'd');
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	2200      	movs	r2, #0
 80005da:	494d      	ldr	r1, [pc, #308]	; (8000710 <main+0x16c>)
 80005dc:	484d      	ldr	r0, [pc, #308]	; (8000714 <main+0x170>)
 80005de:	f7ff ffa7 	bl	8000530 <actuate_key>
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1)
 80005e2:	2180      	movs	r1, #128	; 0x80
 80005e4:	4849      	ldr	r0, [pc, #292]	; (800070c <main+0x168>)
 80005e6:	f000 fd23 	bl	8001030 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d107      	bne.n	8000600 <main+0x5c>
	  {
		  pressed_keys[1] = true;
 80005f0:	2301      	movs	r3, #1
 80005f2:	707b      	strb	r3, [r7, #1]
		  actuate_key(&hUsbDeviceFS, HID_buffer, 1, 'l');
 80005f4:	236c      	movs	r3, #108	; 0x6c
 80005f6:	2201      	movs	r2, #1
 80005f8:	4945      	ldr	r1, [pc, #276]	; (8000710 <main+0x16c>)
 80005fa:	4846      	ldr	r0, [pc, #280]	; (8000714 <main+0x170>)
 80005fc:	f7ff ff98 	bl	8000530 <actuate_key>
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1)
 8000600:	2120      	movs	r1, #32
 8000602:	4842      	ldr	r0, [pc, #264]	; (800070c <main+0x168>)
 8000604:	f000 fd14 	bl	8001030 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d107      	bne.n	800061e <main+0x7a>
	  {
		  pressed_keys[2] = true;
 800060e:	2301      	movs	r3, #1
 8000610:	70bb      	strb	r3, [r7, #2]
		  actuate_key(&hUsbDeviceFS, HID_buffer, 2, 'f');
 8000612:	2366      	movs	r3, #102	; 0x66
 8000614:	2202      	movs	r2, #2
 8000616:	493e      	ldr	r1, [pc, #248]	; (8000710 <main+0x16c>)
 8000618:	483e      	ldr	r0, [pc, #248]	; (8000714 <main+0x170>)
 800061a:	f7ff ff89 	bl	8000530 <actuate_key>
	  }

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 1)
 800061e:	2108      	movs	r1, #8
 8000620:	483a      	ldr	r0, [pc, #232]	; (800070c <main+0x168>)
 8000622:	f000 fd05 	bl	8001030 <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	2b01      	cmp	r3, #1
 800062a:	d107      	bne.n	800063c <main+0x98>
	  {
		  pressed_keys[3] = true;
 800062c:	2301      	movs	r3, #1
 800062e:	70fb      	strb	r3, [r7, #3]
		  actuate_key(&hUsbDeviceFS, HID_buffer, 3, 'j');
 8000630:	236a      	movs	r3, #106	; 0x6a
 8000632:	2203      	movs	r2, #3
 8000634:	4936      	ldr	r1, [pc, #216]	; (8000710 <main+0x16c>)
 8000636:	4837      	ldr	r0, [pc, #220]	; (8000714 <main+0x170>)
 8000638:	f7ff ff7a 	bl	8000530 <actuate_key>
	  }

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1)
 800063c:	2102      	movs	r1, #2
 800063e:	4836      	ldr	r0, [pc, #216]	; (8000718 <main+0x174>)
 8000640:	f000 fcf6 	bl	8001030 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d107      	bne.n	800065a <main+0xb6>
	  {
		  pressed_keys[4] = true;
 800064a:	2301      	movs	r3, #1
 800064c:	713b      	strb	r3, [r7, #4]
		  actuate_key(&hUsbDeviceFS, HID_buffer, 4, 'k');
 800064e:	236b      	movs	r3, #107	; 0x6b
 8000650:	2204      	movs	r2, #4
 8000652:	492f      	ldr	r1, [pc, #188]	; (8000710 <main+0x16c>)
 8000654:	482f      	ldr	r0, [pc, #188]	; (8000714 <main+0x170>)
 8000656:	f7ff ff6b 	bl	8000530 <actuate_key>
	  }

	  // release keys
	  if (pressed_keys[0] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0)
 800065a:	783b      	ldrb	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00e      	beq.n	800067e <main+0xda>
 8000660:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000664:	4829      	ldr	r0, [pc, #164]	; (800070c <main+0x168>)
 8000666:	f000 fce3 	bl	8001030 <HAL_GPIO_ReadPin>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d106      	bne.n	800067e <main+0xda>
	  {
		  pressed_keys[0] = false;
 8000670:	2300      	movs	r3, #0
 8000672:	703b      	strb	r3, [r7, #0]
		  release_key(&hUsbDeviceFS, HID_buffer, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	4926      	ldr	r1, [pc, #152]	; (8000710 <main+0x16c>)
 8000678:	4826      	ldr	r0, [pc, #152]	; (8000714 <main+0x170>)
 800067a:	f7ff ff78 	bl	800056e <release_key>
	  }

	  if (pressed_keys[1] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0)
 800067e:	787b      	ldrb	r3, [r7, #1]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00d      	beq.n	80006a0 <main+0xfc>
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4821      	ldr	r0, [pc, #132]	; (800070c <main+0x168>)
 8000688:	f000 fcd2 	bl	8001030 <HAL_GPIO_ReadPin>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d106      	bne.n	80006a0 <main+0xfc>
	  {
		  pressed_keys[1] = false;
 8000692:	2300      	movs	r3, #0
 8000694:	707b      	strb	r3, [r7, #1]
		  release_key(&hUsbDeviceFS, HID_buffer, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	491d      	ldr	r1, [pc, #116]	; (8000710 <main+0x16c>)
 800069a:	481e      	ldr	r0, [pc, #120]	; (8000714 <main+0x170>)
 800069c:	f7ff ff67 	bl	800056e <release_key>
	  }

	  if (pressed_keys[2] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0)
 80006a0:	78bb      	ldrb	r3, [r7, #2]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00d      	beq.n	80006c2 <main+0x11e>
 80006a6:	2120      	movs	r1, #32
 80006a8:	4818      	ldr	r0, [pc, #96]	; (800070c <main+0x168>)
 80006aa:	f000 fcc1 	bl	8001030 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d106      	bne.n	80006c2 <main+0x11e>
	  {
		  pressed_keys[2] = false;
 80006b4:	2300      	movs	r3, #0
 80006b6:	70bb      	strb	r3, [r7, #2]
		  release_key(&hUsbDeviceFS, HID_buffer, 2);
 80006b8:	2202      	movs	r2, #2
 80006ba:	4915      	ldr	r1, [pc, #84]	; (8000710 <main+0x16c>)
 80006bc:	4815      	ldr	r0, [pc, #84]	; (8000714 <main+0x170>)
 80006be:	f7ff ff56 	bl	800056e <release_key>
	  }

	  if (pressed_keys[3] && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00d      	beq.n	80006e4 <main+0x140>
 80006c8:	2108      	movs	r1, #8
 80006ca:	4810      	ldr	r0, [pc, #64]	; (800070c <main+0x168>)
 80006cc:	f000 fcb0 	bl	8001030 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <main+0x140>
	  {
		  pressed_keys[3] = false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	70fb      	strb	r3, [r7, #3]
		  release_key(&hUsbDeviceFS, HID_buffer, 3);
 80006da:	2203      	movs	r2, #3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <main+0x16c>)
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <main+0x170>)
 80006e0:	f7ff ff45 	bl	800056e <release_key>
	  }

	  if (pressed_keys[4] && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 0)
 80006e4:	793b      	ldrb	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f43f af6b 	beq.w	80005c2 <main+0x1e>
 80006ec:	2102      	movs	r1, #2
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <main+0x174>)
 80006f0:	f000 fc9e 	bl	8001030 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f47f af63 	bne.w	80005c2 <main+0x1e>
	  {
		  pressed_keys[4] = false;
 80006fc:	2300      	movs	r3, #0
 80006fe:	713b      	strb	r3, [r7, #4]
		  release_key(&hUsbDeviceFS, HID_buffer, 4);
 8000700:	2204      	movs	r2, #4
 8000702:	4903      	ldr	r1, [pc, #12]	; (8000710 <main+0x16c>)
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <main+0x170>)
 8000706:	f7ff ff32 	bl	800056e <release_key>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 1)
 800070a:	e75a      	b.n	80005c2 <main+0x1e>
 800070c:	40020400 	.word	0x40020400
 8000710:	20000174 	.word	0x20000174
 8000714:	20000198 	.word	0x20000198
 8000718:	40020000 	.word	0x40020000

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 fd12 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <SystemClock_Config+0xc8>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <SystemClock_Config+0xc8>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	; 0x40
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <SystemClock_Config+0xc8>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <SystemClock_Config+0xcc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <SystemClock_Config+0xcc>)
 8000766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemClock_Config+0xcc>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000790:	2390      	movs	r3, #144	; 0x90
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000794:	2304      	movs	r3, #4
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000798:	2305      	movs	r3, #5
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fdc9 	bl	8002338 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007ac:	f000 f876 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2101      	movs	r1, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 f82b 	bl	8002828 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007d8:	f000 f860 	bl	800089c <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <MX_GPIO_Init+0xa4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_GPIO_Init+0xa4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_GPIO_Init+0xa4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000856:	2302      	movs	r3, #2
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <MX_GPIO_Init+0xa8>)
 800086a:	f000 fa5d 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 800086e:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0xac>)
 8000884:	f000 fa50 	bl	8000d28 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f89a 	bl	8000a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <OTG_FS_IRQHandler+0x10>)
 8000952:	f000 fcd5 	bl	8001300 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000668 	.word	0x20000668

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f005 fbab 	bl	800610c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fdf5 	bl	80005a4 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80009c8:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 80009cc:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80009d0:	20000a70 	.word	0x20000a70

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f94f 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	200f      	movs	r0, #15
 8000a08:	f000 f808 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff ff4c 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x54>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x58>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f967 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00e      	b.n	8000a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d80a      	bhi.n	8000a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f92f 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000004 	.word	0x20000004

08000a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x20>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_IncTick+0x24>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000194 	.word	0x20000194

08000aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <HAL_GetTick+0x14>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000194 	.word	0x20000194

08000abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac4:	f7ff ffee 	bl	8000aa4 <HAL_GetTick>
 8000ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad4:	d005      	beq.n	8000ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <HAL_Delay+0x44>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4413      	add	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae2:	bf00      	nop
 8000ae4:	f7ff ffde 	bl	8000aa4 <HAL_GetTick>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d8f7      	bhi.n	8000ae4 <HAL_Delay+0x28>
  {
  }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e159      	b.n	8000ff8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 8148 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80a2 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b57      	ldr	r3, [pc, #348]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a56      	ldr	r2, [pc, #344]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b54      	ldr	r3, [pc, #336]	; (8001010 <HAL_GPIO_Init+0x2e8>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	; (8001018 <HAL_GPIO_Init+0x2f0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x202>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a48      	ldr	r2, [pc, #288]	; (800101c <HAL_GPIO_Init+0x2f4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x1fe>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a47      	ldr	r2, [pc, #284]	; (8001020 <HAL_GPIO_Init+0x2f8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x1fa>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a46      	ldr	r2, [pc, #280]	; (8001024 <HAL_GPIO_Init+0x2fc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x1f6>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a45      	ldr	r2, [pc, #276]	; (8001028 <HAL_GPIO_Init+0x300>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x1f2>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x204>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x2ec>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <HAL_GPIO_Init+0x304>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6e:	4a2f      	ldr	r2, [pc, #188]	; (800102c <HAL_GPIO_Init+0x304>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_GPIO_Init+0x304>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f98:	4a24      	ldr	r2, [pc, #144]	; (800102c <HAL_GPIO_Init+0x304>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9e:	4b23      	ldr	r3, [pc, #140]	; (800102c <HAL_GPIO_Init+0x304>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	; (800102c <HAL_GPIO_Init+0x304>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_GPIO_Init+0x304>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fec:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_GPIO_Init+0x304>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f aea2 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40013c00 	.word	0x40013c00

08001030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	887b      	ldrh	r3, [r7, #2]
 8001042:	4013      	ands	r3, r2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e001      	b.n	8001052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001062:	b08f      	sub	sp, #60	; 0x3c
 8001064:	af0a      	add	r7, sp, #40	; 0x28
 8001066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e10f      	b.n	8001292 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f004 fd45 	bl	8005b1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2203      	movs	r2, #3
 8001096:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 fe76 	bl	8002da2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	687e      	ldr	r6, [r7, #4]
 80010be:	466d      	mov	r5, sp
 80010c0:	f106 0410 	add.w	r4, r6, #16
 80010c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d4:	1d33      	adds	r3, r6, #4
 80010d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d8:	6838      	ldr	r0, [r7, #0]
 80010da:	f001 fd4d 	bl	8002b78 <USB_CoreInit>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0d0      	b.n	8001292 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fe64 	bl	8002dc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e04a      	b.n	8001198 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	333d      	adds	r3, #61	; 0x3d
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	333c      	adds	r3, #60	; 0x3c
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	b298      	uxth	r0, r3
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	3342      	adds	r3, #66	; 0x42
 800113e:	4602      	mov	r2, r0
 8001140:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	333f      	adds	r3, #63	; 0x3f
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	440b      	add	r3, r1
 8001164:	3344      	adds	r3, #68	; 0x44
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	3348      	adds	r3, #72	; 0x48
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	1a9b      	subs	r3, r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	3350      	adds	r3, #80	; 0x50
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3301      	adds	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d3af      	bcc.n	8001102 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e044      	b.n	8001232 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	1a9b      	subs	r3, r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011d0:	7bfa      	ldrb	r2, [r7, #15]
 80011d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	1a9b      	subs	r3, r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	1a9b      	subs	r3, r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	3301      	adds	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	7bfa      	ldrb	r2, [r7, #15]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	d3b5      	bcc.n	80011a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	687e      	ldr	r6, [r7, #4]
 8001244:	466d      	mov	r5, sp
 8001246:	f106 0410 	add.w	r4, r6, #16
 800124a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001252:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001256:	e885 0003 	stmia.w	r5, {r0, r1}
 800125a:	1d33      	adds	r3, r6, #4
 800125c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f001 fdfc 	bl	8002e5c <USB_DevInit>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2202      	movs	r2, #2
 800126e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00d      	b.n	8001292 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fe78 	bl	8003f80 <USB_DevDisconnect>

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800129a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b084      	sub	sp, #16
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_PCD_Start+0x1c>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e020      	b.n	80012f8 <HAL_PCD_Start+0x5e>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d109      	bne.n	80012da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d005      	beq.n	80012da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fd4e 	bl	8002d80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fe28 	bl	8003f3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08d      	sub	sp, #52	; 0x34
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fee6 	bl	80040e8 <USB_GetMode>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	f040 839d 	bne.w	8001a5e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fe4a 	bl	8003fc2 <USB_ReadInterrupts>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8393 	beq.w	8001a5c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fe41 	bl	8003fc2 <USB_ReadInterrupts>
 8001340:	4603      	mov	r3, r0
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b02      	cmp	r3, #2
 8001348:	d107      	bne.n	800135a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f002 0202 	and.w	r2, r2, #2
 8001358:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fe2f 	bl	8003fc2 <USB_ReadInterrupts>
 8001364:	4603      	mov	r3, r0
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b10      	cmp	r3, #16
 800136c:	d161      	bne.n	8001432 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699a      	ldr	r2, [r3, #24]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0210 	bic.w	r2, r2, #16
 800137c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800137e:	6a3b      	ldr	r3, [r7, #32]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	f003 020f 	and.w	r2, r3, #15
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	0c5b      	lsrs	r3, r3, #17
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d124      	bne.n	80013f4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d035      	beq.n	8001422 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	6a38      	ldr	r0, [r7, #32]
 80013ca:	f002 fc66 	bl	8003c9a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013da:	441a      	add	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ec:	441a      	add	r2, r3
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	619a      	str	r2, [r3, #24]
 80013f2:	e016      	b.n	8001422 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	0c5b      	lsrs	r3, r3, #17
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d110      	bne.n	8001422 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001406:	2208      	movs	r2, #8
 8001408:	4619      	mov	r1, r3
 800140a:	6a38      	ldr	r0, [r7, #32]
 800140c:	f002 fc45 	bl	8003c9a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	699a      	ldr	r2, [r3, #24]
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141c:	441a      	add	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0210 	orr.w	r2, r2, #16
 8001430:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fdc3 	bl	8003fc2 <USB_ReadInterrupts>
 800143c:	4603      	mov	r3, r0
 800143e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001442:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001446:	d16e      	bne.n	8001526 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fdc9 	bl	8003fe8 <USB_ReadDevAllOutEpInterrupt>
 8001456:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001458:	e062      	b.n	8001520 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d057      	beq.n	8001514 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fdee 	bl	8004050 <USB_ReadDevOutEPInterrupt>
 8001474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00c      	beq.n	800149a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	015a      	lsls	r2, r3, #5
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	4413      	add	r3, r2
 8001488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148c:	461a      	mov	r2, r3
 800148e:	2301      	movs	r3, #1
 8001490:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fd99 	bl	8001fcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00c      	beq.n	80014be <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	015a      	lsls	r2, r3, #5
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b0:	461a      	mov	r2, r3
 80014b2:	2308      	movs	r3, #8
 80014b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fe93 	bl	80021e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	015a      	lsls	r2, r3, #5
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d4:	461a      	mov	r2, r3
 80014d6:	2310      	movs	r3, #16
 80014d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f0:	461a      	mov	r2, r3
 80014f2:	2320      	movs	r3, #32
 80014f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d009      	beq.n	8001514 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150c:	461a      	mov	r2, r3
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	3301      	adds	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	d199      	bne.n	800145a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fd49 	bl	8003fc2 <USB_ReadInterrupts>
 8001530:	4603      	mov	r3, r0
 8001532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001536:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800153a:	f040 80c0 	bne.w	80016be <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f002 fd6a 	bl	800401c <USB_ReadDevAllInEpInterrupt>
 8001548:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800154e:	e0b2      	b.n	80016b6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80a7 	beq.w	80016aa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f002 fd90 	bl	800408c <USB_ReadDevInEPInterrupt>
 800156c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d057      	beq.n	8001628 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	2201      	movs	r2, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	69f9      	ldr	r1, [r7, #28]
 8001594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001598:	4013      	ands	r3, r2
 800159a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a8:	461a      	mov	r2, r3
 80015aa:	2301      	movs	r3, #1
 80015ac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d132      	bne.n	800161c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	1a9b      	subs	r3, r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	3348      	adds	r3, #72	; 0x48
 80015c6:	6819      	ldr	r1, [r3, #0]
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4403      	add	r3, r0
 80015d6:	3344      	adds	r3, #68	; 0x44
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4419      	add	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4403      	add	r3, r0
 80015ea:	3348      	adds	r3, #72	; 0x48
 80015ec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d113      	bne.n	800161c <HAL_PCD_IRQHandler+0x31c>
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3350      	adds	r3, #80	; 0x50
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001614:	461a      	mov	r2, r3
 8001616:	2101      	movs	r1, #1
 8001618:	f002 fd98 	bl	800414c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f004 fafb 	bl	8005c1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d008      	beq.n	8001644 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	015a      	lsls	r2, r3, #5
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	4413      	add	r3, r2
 800163a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800163e:	461a      	mov	r2, r3
 8001640:	2308      	movs	r3, #8
 8001642:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b00      	cmp	r3, #0
 800164c:	d008      	beq.n	8001660 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	4413      	add	r3, r2
 8001656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165a:	461a      	mov	r2, r3
 800165c:	2310      	movs	r3, #16
 800165e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001676:	461a      	mov	r2, r3
 8001678:	2340      	movs	r3, #64	; 0x40
 800167a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d008      	beq.n	8001698 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001692:	461a      	mov	r2, r3
 8001694:	2302      	movs	r3, #2
 8001696:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 fc03 	bl	8001eb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	3301      	adds	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f47f af49 	bne.w	8001550 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fc7d 	bl	8003fc2 <USB_ReadInterrupts>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016d2:	d122      	bne.n	800171a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016fa:	2100      	movs	r1, #0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fe0f 	bl	8002320 <HAL_PCDEx_LPM_Callback>
 8001702:	e002      	b.n	800170a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f004 faf7 	bl	8005cf8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fc4f 	bl	8003fc2 <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800172a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800172e:	d112      	bne.n	8001756 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f004 fab3 	bl	8005cac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001754:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fc31 	bl	8003fc2 <USB_ReadInterrupts>
 8001760:	4603      	mov	r3, r0
 8001762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800176a:	f040 80c7 	bne.w	80018fc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2110      	movs	r1, #16
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fccb 	bl	8003124 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001792:	e056      	b.n	8001842 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a0:	461a      	mov	r2, r3
 80017a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b8:	0151      	lsls	r1, r2, #5
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	440a      	add	r2, r1
 80017be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ca:	015a      	lsls	r2, r3, #5
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d8:	0151      	lsls	r1, r2, #5
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	440a      	add	r2, r1
 80017de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f4:	461a      	mov	r2, r3
 80017f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180c:	0151      	lsls	r1, r2, #5
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	440a      	add	r2, r1
 8001812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800181a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	015a      	lsls	r2, r3, #5
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	4413      	add	r3, r2
 8001824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800182c:	0151      	lsls	r1, r2, #5
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	440a      	add	r2, r1
 8001832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800183a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	3301      	adds	r3, #1
 8001840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001848:	429a      	cmp	r2, r3
 800184a:	d3a3      	bcc.n	8001794 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800185e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	2b00      	cmp	r3, #0
 8001866:	d016      	beq.n	8001896 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001878:	f043 030b 	orr.w	r3, r3, #11
 800187c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	69fa      	ldr	r2, [r7, #28]
 800188a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188e:	f043 030b 	orr.w	r3, r3, #11
 8001892:	6453      	str	r3, [r2, #68]	; 0x44
 8001894:	e015      	b.n	80018c2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018bc:	f043 030b 	orr.w	r3, r3, #11
 80018c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018e6:	461a      	mov	r2, r3
 80018e8:	f002 fc30 	bl	800414c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fb5e 	bl	8003fc2 <USB_ReadInterrupts>
 8001906:	4603      	mov	r3, r0
 8001908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001910:	d124      	bne.n	800195c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fbf4 	bl	8004104 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f001 fc5c 	bl	80031de <USB_GetDevSpeed>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681c      	ldr	r4, [r3, #0]
 8001932:	f001 f915 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8001936:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	4620      	mov	r0, r4
 8001942:	f001 f97b 	bl	8002c3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f004 f991 	bl	8005c6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800195a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fb2e 	bl	8003fc2 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b08      	cmp	r3, #8
 800196e:	d10a      	bne.n	8001986 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f004 f96e 	bl	8005c52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f002 0208 	and.w	r2, r2, #8
 8001984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fb19 	bl	8003fc2 <USB_ReadInterrupts>
 8001990:	4603      	mov	r3, r0
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800199a:	d10f      	bne.n	80019bc <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f004 f9c6 	bl	8005d38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fafe 	bl	8003fc2 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019d0:	d10f      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4619      	mov	r1, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f004 f999 	bl	8005d14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f002 fae3 	bl	8003fc2 <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a06:	d10a      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f004 f9a7 	bl	8005d5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f002 facd 	bl	8003fc2 <USB_ReadInterrupts>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d115      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f004 f997 	bl	8005d78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6859      	ldr	r1, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	e000      	b.n	8001a5e <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a5c:	bf00      	nop
    }
  }
}
 8001a5e:	3734      	adds	r7, #52	; 0x34
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}

08001a64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_SetAddress+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e013      	b.n	8001aa6 <HAL_PCD_SetAddress+0x42>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fa2b 	bl	8003ef2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	4608      	mov	r0, r1
 8001ab8:	4611      	mov	r1, r2
 8001aba:	461a      	mov	r2, r3
 8001abc:	4603      	mov	r3, r0
 8001abe:	70fb      	strb	r3, [r7, #3]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	803b      	strh	r3, [r7, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	da0f      	bge.n	8001af4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	705a      	strb	r2, [r3, #1]
 8001af2:	e00f      	b.n	8001b14 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b20:	883a      	ldrh	r2, [r7, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	78ba      	ldrb	r2, [r7, #2]
 8001b2a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	785b      	ldrb	r3, [r3, #1]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3e:	78bb      	ldrb	r3, [r7, #2]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d102      	bne.n	8001b4a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_EP_Open+0xaa>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e00e      	b.n	8001b76 <HAL_PCD_EP_Open+0xc8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fb5e 	bl	8003228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da0f      	bge.n	8001bb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	3338      	adds	r3, #56	; 0x38
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	705a      	strb	r2, [r3, #1]
 8001bb0:	e00f      	b.n	8001bd2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f003 020f 	and.w	r2, r3, #15
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3304      	adds	r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_PCD_EP_Close+0x6e>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e00e      	b.n	8001c0a <HAL_PCD_EP_Close+0x8c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 fb9c 	bl	8003338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	7afb      	ldrb	r3, [r7, #11]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	6979      	ldr	r1, [r7, #20]
 8001c86:	f001 fe77 	bl	8003978 <USB_EP0StartXfer>
 8001c8a:	e008      	b.n	8001c9e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	6979      	ldr	r1, [r7, #20]
 8001c9a:	f001 fc29 	bl	80034f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	3338      	adds	r3, #56	; 0x38
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d102      	bne.n	8001d02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	6979      	ldr	r1, [r7, #20]
 8001d1a:	f001 fe2d 	bl	8003978 <USB_EP0StartXfer>
 8001d1e:	e008      	b.n	8001d32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6979      	ldr	r1, [r7, #20]
 8001d2e:	f001 fbdf 	bl	80034f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	f003 020f 	and.w	r2, r3, #15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d901      	bls.n	8001d5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e050      	b.n	8001dfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da0f      	bge.n	8001d82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 020f 	and.w	r2, r3, #15
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	3338      	adds	r3, #56	; 0x38
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	705a      	strb	r2, [r3, #1]
 8001d80:	e00d      	b.n	8001d9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_PCD_EP_SetStall+0x82>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e01e      	b.n	8001dfc <HAL_PCD_EP_SetStall+0xc0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f001 ffbc 	bl	8003d4a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	b2d9      	uxtb	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001dec:	461a      	mov	r2, r3
 8001dee:	f002 f9ad 	bl	800414c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d901      	bls.n	8001e22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e042      	b.n	8001ea8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da0f      	bge.n	8001e4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	3338      	adds	r3, #56	; 0x38
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	705a      	strb	r2, [r3, #1]
 8001e48:	e00f      	b.n	8001e6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	f003 020f 	and.w	r2, r3, #15
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	3304      	adds	r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_ClrStall+0x86>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e00e      	b.n	8001ea8 <HAL_PCD_EP_ClrStall+0xa4>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 ffc4 	bl	8003e26 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af02      	add	r7, sp, #8
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3338      	adds	r3, #56	; 0x38
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d901      	bls.n	8001ee8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e06c      	b.n	8001fc2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d902      	bls.n	8001f04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	3303      	adds	r3, #3
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f0c:	e02b      	b.n	8001f66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d902      	bls.n	8001f2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3303      	adds	r3, #3
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	4603      	mov	r3, r0
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f001 fe68 	bl	8003c1e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	441a      	add	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	441a      	add	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d809      	bhi.n	8001f90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d203      	bcs.n	8001f90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1be      	bne.n	8001f0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	695a      	ldr	r2, [r3, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d811      	bhi.n	8001fc0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	333c      	adds	r3, #60	; 0x3c
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	f040 80a0 	bne.w	8002144 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a72      	ldr	r2, [pc, #456]	; (80021dc <PCD_EP_OutXfrComplete_int+0x210>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f240 80dd 	bls.w	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80d7 	beq.w	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002030:	461a      	mov	r2, r3
 8002032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002036:	6093      	str	r3, [r2, #8]
 8002038:	e0cb      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4413      	add	r3, r2
 800204c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002050:	461a      	mov	r2, r3
 8002052:	2320      	movs	r3, #32
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e0bc      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80b7 	bne.w	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <PCD_EP_OutXfrComplete_int+0x210>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d90f      	bls.n	800208c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002082:	461a      	mov	r2, r3
 8002084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002088:	6093      	str	r3, [r2, #8]
 800208a:	e0a2      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800209e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	1a9b      	subs	r3, r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4403      	add	r3, r0
 80020c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4403      	add	r3, r0
 80020ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4419      	add	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002104:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d114      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x16a>
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800212e:	461a      	mov	r2, r3
 8002130:	2101      	movs	r1, #1
 8002132:	f002 f80b 	bl	800414c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f003 fd53 	bl	8005be8 <HAL_PCD_DataOutStageCallback>
 8002142:	e046      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a26      	ldr	r2, [pc, #152]	; (80021e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d124      	bne.n	8002196 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002162:	461a      	mov	r2, r3
 8002164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002168:	6093      	str	r3, [r2, #8]
 800216a:	e032      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	2320      	movs	r3, #32
 8002186:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f003 fd2a 	bl	8005be8 <HAL_PCD_DataOutStageCallback>
 8002194:	e01d      	b.n	80021d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d114      	bne.n	80021c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021be:	461a      	mov	r2, r3
 80021c0:	2100      	movs	r1, #0
 80021c2:	f001 ffc3 	bl	800414c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f003 fd0b 	bl	8005be8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	4f54300a 	.word	0x4f54300a
 80021e0:	4f54310a 	.word	0x4f54310a

080021e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	333c      	adds	r3, #60	; 0x3c
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <PCD_EP_OutSetupPacket_int+0x88>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d90e      	bls.n	8002238 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d009      	beq.n	8002238 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002230:	461a      	mov	r2, r3
 8002232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002236:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f003 fcc3 	bl	8005bc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <PCD_EP_OutSetupPacket_int+0x88>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d90c      	bls.n	8002260 <PCD_EP_OutSetupPacket_int+0x7c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002258:	461a      	mov	r2, r3
 800225a:	2101      	movs	r1, #1
 800225c:	f001 ff76 	bl	800414c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	4f54300a 	.word	0x4f54300a

08002270 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
 800227c:	4613      	mov	r3, r2
 800227e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800228e:	883b      	ldrh	r3, [r7, #0]
 8002290:	0419      	lsls	r1, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	430a      	orrs	r2, r1
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
 800229c:	e028      	b.n	80022f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a4:	0c1b      	lsrs	r3, r3, #16
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e00d      	b.n	80022ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	3340      	adds	r3, #64	; 0x40
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0c1b      	lsrs	r3, r3, #16
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3ec      	bcc.n	80022b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022d8:	883b      	ldrh	r3, [r7, #0]
 80022da:	0418      	lsls	r0, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	78fb      	ldrb	r3, [r7, #3]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	4302      	orrs	r2, r0
 80022e8:	3340      	adds	r3, #64	; 0x40
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e264      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e23f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fb58 	bl	8000aa4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7fe fb54 	bl	8000aa4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e204      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fb44 	bl	8000aa4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe fb40 	bl	8000aa4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f0      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c4      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe faf9 	bl	8000aa4 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe faf5 	bl	8000aa4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fad8 	bl	8000aa4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe fad4 	bl	8000aa4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e184      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fab8 	bl	8000aa4 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe fab4 	bl	8000aa4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e164      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe faa1 	bl	8000aa4 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe fa9d 	bl	8000aa4 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e14d      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fa63 	bl	8000aa4 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fa56 	bl	8000aa4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e106      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a74      	ldr	r2, [pc, #464]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a71      	ldr	r2, [pc, #452]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fa1b 	bl	8000aa4 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fa17 	bl	8000aa4 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0c5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fa05 	bl	8000aa4 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fa01 	bl	8000aa4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0af      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 809b 	beq.w	8002812 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d05c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d141      	bne.n	8002774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe f9d5 	bl	8000aa4 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe f9d1 	bl	8000aa4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e081      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	019b      	lsls	r3, r3, #6
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe f9aa 	bl	8000aa4 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f9a6 	bl	8000aa4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e056      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x41c>
 8002772:	e04e      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe f993 	bl	8000aa4 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe f98f 	bl	8000aa4 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x44a>
 80027a0:	e037      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e032      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d028      	beq.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d121      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d11a      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40007000 	.word	0x40007000
 8002820:	40023800 	.word	0x40023800
 8002824:	42470060 	.word	0x42470060

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe f8c4 	bl	8000aa4 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe f8c0 	bl	8000aa4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f824 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	080061c0 	.word	0x080061c0
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	b5b0      	push	{r4, r5, r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fa:	2100      	movs	r1, #0
 80029fc:	6079      	str	r1, [r7, #4]
 80029fe:	2100      	movs	r1, #0
 8002a00:	60f9      	str	r1, [r7, #12]
 8002a02:	2100      	movs	r1, #0
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a06:	2100      	movs	r1, #0
 8002a08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0a:	4952      	ldr	r1, [pc, #328]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a0c:	6889      	ldr	r1, [r1, #8]
 8002a0e:	f001 010c 	and.w	r1, r1, #12
 8002a12:	2908      	cmp	r1, #8
 8002a14:	d00d      	beq.n	8002a32 <HAL_RCC_GetSysClockFreq+0x3e>
 8002a16:	2908      	cmp	r1, #8
 8002a18:	f200 8094 	bhi.w	8002b44 <HAL_RCC_GetSysClockFreq+0x150>
 8002a1c:	2900      	cmp	r1, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x32>
 8002a20:	2904      	cmp	r1, #4
 8002a22:	d003      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x38>
 8002a24:	e08e      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a26:	4b4c      	ldr	r3, [pc, #304]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a28:	60bb      	str	r3, [r7, #8]
       break;
 8002a2a:	e08e      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002a2e:	60bb      	str	r3, [r7, #8]
      break;
 8002a30:	e08b      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a32:	4948      	ldr	r1, [pc, #288]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a34:	6849      	ldr	r1, [r1, #4]
 8002a36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a3a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3c:	4945      	ldr	r1, [pc, #276]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a3e:	6849      	ldr	r1, [r1, #4]
 8002a40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a44:	2900      	cmp	r1, #0
 8002a46:	d024      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4942      	ldr	r1, [pc, #264]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a4a:	6849      	ldr	r1, [r1, #4]
 8002a4c:	0989      	lsrs	r1, r1, #6
 8002a4e:	4608      	mov	r0, r1
 8002a50:	f04f 0100 	mov.w	r1, #0
 8002a54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a58:	f04f 0500 	mov.w	r5, #0
 8002a5c:	ea00 0204 	and.w	r2, r0, r4
 8002a60:	ea01 0305 	and.w	r3, r1, r5
 8002a64:	493d      	ldr	r1, [pc, #244]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002a66:	fb01 f003 	mul.w	r0, r1, r3
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	fb01 f102 	mul.w	r1, r1, r2
 8002a70:	1844      	adds	r4, r0, r1
 8002a72:	493a      	ldr	r1, [pc, #232]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002a74:	fba2 0101 	umull	r0, r1, r2, r1
 8002a78:	1863      	adds	r3, r4, r1
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f7fd fba8 	bl	80001d8 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e04a      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	ea02 0400 	and.w	r4, r2, r0
 8002aaa:	ea03 0501 	and.w	r5, r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	014b      	lsls	r3, r1, #5
 8002abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ac0:	0142      	lsls	r2, r0, #5
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	1b00      	subs	r0, r0, r4
 8002ac8:	eb61 0105 	sbc.w	r1, r1, r5
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	018b      	lsls	r3, r1, #6
 8002ad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ada:	0182      	lsls	r2, r0, #6
 8002adc:	1a12      	subs	r2, r2, r0
 8002ade:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	00d9      	lsls	r1, r3, #3
 8002aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af0:	00d0      	lsls	r0, r2, #3
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	1912      	adds	r2, r2, r4
 8002af8:	eb45 0303 	adc.w	r3, r5, r3
 8002afc:	f04f 0000 	mov.w	r0, #0
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	0299      	lsls	r1, r3, #10
 8002b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b0a:	0290      	lsls	r0, r2, #10
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f7fd fb5c 	bl	80001d8 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4613      	mov	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	60bb      	str	r3, [r7, #8]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b46:	60bb      	str	r3, [r7, #8]
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bdb0      	pop	{r4, r5, r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	017d7840 	.word	0x017d7840

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000

08002b78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b78:	b084      	sub	sp, #16
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	f107 001c 	add.w	r0, r7, #28
 8002b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d122      	bne.n	8002bd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f001 fb1c 	bl	8004208 <USB_CoreReset>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	e01a      	b.n	8002c0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f001 fb10 	bl	8004208 <USB_CoreReset>
 8002be8:	4603      	mov	r3, r0
 8002bea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8002bfe:	e005      	b.n	8002c0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10b      	bne.n	8002c2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f043 0206 	orr.w	r2, r3, #6
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c36:	b004      	add	sp, #16
 8002c38:	4770      	bx	lr
	...

08002c3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d165      	bne.n	8002d1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a41      	ldr	r2, [pc, #260]	; (8002d58 <USB_SetTurnaroundTime+0x11c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d906      	bls.n	8002c66 <USB_SetTurnaroundTime+0x2a>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <USB_SetTurnaroundTime+0x120>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d202      	bcs.n	8002c66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c60:	230f      	movs	r3, #15
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e062      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	4a3c      	ldr	r2, [pc, #240]	; (8002d5c <USB_SetTurnaroundTime+0x120>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d306      	bcc.n	8002c7c <USB_SetTurnaroundTime+0x40>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4a3b      	ldr	r2, [pc, #236]	; (8002d60 <USB_SetTurnaroundTime+0x124>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d202      	bcs.n	8002c7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c76:	230e      	movs	r3, #14
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	e057      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <USB_SetTurnaroundTime+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d306      	bcc.n	8002c92 <USB_SetTurnaroundTime+0x56>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4a37      	ldr	r2, [pc, #220]	; (8002d64 <USB_SetTurnaroundTime+0x128>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d202      	bcs.n	8002c92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c8c:	230d      	movs	r3, #13
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	e04c      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <USB_SetTurnaroundTime+0x128>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d306      	bcc.n	8002ca8 <USB_SetTurnaroundTime+0x6c>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4a32      	ldr	r2, [pc, #200]	; (8002d68 <USB_SetTurnaroundTime+0x12c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d802      	bhi.n	8002ca8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	e041      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <USB_SetTurnaroundTime+0x12c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d906      	bls.n	8002cbe <USB_SetTurnaroundTime+0x82>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4a2e      	ldr	r2, [pc, #184]	; (8002d6c <USB_SetTurnaroundTime+0x130>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d802      	bhi.n	8002cbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002cb8:	230b      	movs	r3, #11
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e036      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <USB_SetTurnaroundTime+0x130>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d906      	bls.n	8002cd4 <USB_SetTurnaroundTime+0x98>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <USB_SetTurnaroundTime+0x134>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d802      	bhi.n	8002cd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002cce:	230a      	movs	r3, #10
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	e02b      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <USB_SetTurnaroundTime+0x134>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d906      	bls.n	8002cea <USB_SetTurnaroundTime+0xae>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <USB_SetTurnaroundTime+0x138>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d202      	bcs.n	8002cea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ce4:	2309      	movs	r3, #9
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e020      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4a21      	ldr	r2, [pc, #132]	; (8002d74 <USB_SetTurnaroundTime+0x138>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d306      	bcc.n	8002d00 <USB_SetTurnaroundTime+0xc4>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <USB_SetTurnaroundTime+0x13c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d802      	bhi.n	8002d00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e015      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <USB_SetTurnaroundTime+0x13c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d906      	bls.n	8002d16 <USB_SetTurnaroundTime+0xda>
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <USB_SetTurnaroundTime+0x140>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d202      	bcs.n	8002d16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d10:	2307      	movs	r3, #7
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e00a      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d16:	2306      	movs	r3, #6
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e007      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d102      	bne.n	8002d28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d22:	2309      	movs	r3, #9
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e001      	b.n	8002d2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d28:	2309      	movs	r3, #9
 8002d2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	029b      	lsls	r3, r3, #10
 8002d40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	371c      	adds	r7, #28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	00d8acbf 	.word	0x00d8acbf
 8002d5c:	00e4e1c0 	.word	0x00e4e1c0
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	01067380 	.word	0x01067380
 8002d68:	011a499f 	.word	0x011a499f
 8002d6c:	01312cff 	.word	0x01312cff
 8002d70:	014ca43f 	.word	0x014ca43f
 8002d74:	016e3600 	.word	0x016e3600
 8002d78:	01a6ab1f 	.word	0x01a6ab1f
 8002d7c:	01e84800 	.word	0x01e84800

08002d80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 0201 	bic.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d115      	bne.n	8002e12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f7fd fe62 	bl	8000abc <HAL_Delay>
      ms++;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f972 	bl	80040e8 <USB_GetMode>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d01e      	beq.n	8002e48 <USB_SetCurrentMode+0x84>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b31      	cmp	r3, #49	; 0x31
 8002e0e:	d9f0      	bls.n	8002df2 <USB_SetCurrentMode+0x2e>
 8002e10:	e01a      	b.n	8002e48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d115      	bne.n	8002e44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e24:	2001      	movs	r0, #1
 8002e26:	f7fd fe49 	bl	8000abc <HAL_Delay>
      ms++;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f001 f959 	bl	80040e8 <USB_GetMode>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <USB_SetCurrentMode+0x84>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b31      	cmp	r3, #49	; 0x31
 8002e40:	d9f0      	bls.n	8002e24 <USB_SetCurrentMode+0x60>
 8002e42:	e001      	b.n	8002e48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e005      	b.n	8002e54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b32      	cmp	r3, #50	; 0x32
 8002e4c:	d101      	bne.n	8002e52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	e009      	b.n	8002e90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3340      	adds	r3, #64	; 0x40
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0e      	cmp	r3, #14
 8002e94:	d9f2      	bls.n	8002e7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11c      	bne.n	8002ed6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
 8002ed4:	e00b      	b.n	8002eee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f00:	4619      	mov	r1, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	461a      	mov	r2, r3
 8002f0a:	680b      	ldr	r3, [r1, #0]
 8002f0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10c      	bne.n	8002f2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d104      	bne.n	8002f24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f945 	bl	80031ac <USB_SetDevSpeed>
 8002f22:	e008      	b.n	8002f36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f24:	2101      	movs	r1, #1
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f940 	bl	80031ac <USB_SetDevSpeed>
 8002f2c:	e003      	b.n	8002f36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f2e:	2103      	movs	r1, #3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f93b 	bl	80031ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f36:	2110      	movs	r1, #16
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f8f3 	bl	8003124 <USB_FlushTxFifo>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f90f 	bl	800316c <USB_FlushRxFifo>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2300      	movs	r3, #0
 8002f62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f76:	461a      	mov	r2, r3
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e043      	b.n	800300a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f98:	d118      	bne.n	8002fcc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10a      	bne.n	8002fb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fac:	461a      	mov	r2, r3
 8002fae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e013      	b.n	8002fde <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e008      	b.n	8002fde <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fea:	461a      	mov	r2, r3
 8002fec:	2300      	movs	r3, #0
 8002fee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003002:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	3301      	adds	r3, #1
 8003008:	613b      	str	r3, [r7, #16]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	429a      	cmp	r2, r3
 8003010:	d3b7      	bcc.n	8002f82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	e043      	b.n	80030a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800302a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800302e:	d118      	bne.n	8003062 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003042:	461a      	mov	r2, r3
 8003044:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e013      	b.n	8003074 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	461a      	mov	r2, r3
 800305a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e008      	b.n	8003074 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	461a      	mov	r2, r3
 8003082:	2300      	movs	r3, #0
 8003084:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	461a      	mov	r2, r3
 8003094:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003098:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3301      	adds	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d3b7      	bcc.n	8003018 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f043 0210 	orr.w	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <USB_DevInit+0x2c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80030e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f043 0208 	orr.w	r2, r3, #8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80030fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003110:	7dfb      	ldrb	r3, [r7, #23]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800311c:	b004      	add	sp, #16
 800311e:	4770      	bx	lr
 8003120:	803c3800 	.word	0x803c3800

08003124 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	019b      	lsls	r3, r3, #6
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3301      	adds	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	4a08      	ldr	r2, [pc, #32]	; (8003168 <USB_FlushTxFifo+0x44>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e006      	b.n	800315c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0320 	and.w	r3, r3, #32
 8003156:	2b20      	cmp	r3, #32
 8003158:	d0f1      	beq.n	800313e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	00030d40 	.word	0x00030d40

0800316c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2210      	movs	r2, #16
 800317c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3301      	adds	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <USB_FlushRxFifo+0x3c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e006      	b.n	800319c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b10      	cmp	r3, #16
 8003198:	d0f1      	beq.n	800317e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	00030d40 	.word	0x00030d40

080031ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	68f9      	ldr	r1, [r7, #12]
 80031c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80031de:	b480      	push	{r7}
 80031e0:	b087      	sub	sp, #28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0306 	and.w	r3, r3, #6
 80031f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
 8003202:	e00a      	b.n	800321a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d002      	beq.n	8003210 <USB_GetDevSpeed+0x32>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d102      	bne.n	8003216 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003210:	2302      	movs	r3, #2
 8003212:	75fb      	strb	r3, [r7, #23]
 8003214:	e001      	b.n	800321a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003216:	230f      	movs	r3, #15
 8003218:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800321a:	7dfb      	ldrb	r3, [r7, #23]
}
 800321c:	4618      	mov	r0, r3
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d13a      	bne.n	80032ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324a:	69da      	ldr	r2, [r3, #28]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	68f9      	ldr	r1, [r7, #12]
 800325e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003262:	4313      	orrs	r3, r2
 8003264:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d155      	bne.n	8003328 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	78db      	ldrb	r3, [r3, #3]
 8003296:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003298:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	059b      	lsls	r3, r3, #22
 800329e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032a0:	4313      	orrs	r3, r2
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	e036      	b.n	8003328 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	2101      	movs	r1, #1
 80032cc:	fa01 f303 	lsl.w	r3, r1, r3
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d8:	4313      	orrs	r3, r2
 80032da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d11a      	bne.n	8003328 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	78db      	ldrb	r3, [r3, #3]
 800330c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800330e:	430b      	orrs	r3, r1
 8003310:	4313      	orrs	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	440a      	add	r2, r1
 800331a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800331e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003326:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d161      	bne.n	8003418 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800336a:	d11f      	bne.n	80033ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	440a      	add	r2, r1
 8003382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800338a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033cc:	4013      	ands	r3, r2
 80033ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f0:	4013      	ands	r3, r2
 80033f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	0159      	lsls	r1, r3, #5
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	440b      	add	r3, r1
 800340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340e:	4619      	mov	r1, r3
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <USB_DeactivateEndpoint+0x1b0>)
 8003412:	4013      	ands	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
 8003416:	e060      	b.n	80034da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800342a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800342e:	d11f      	bne.n	8003470 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0151      	lsls	r1, r2, #5
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	440a      	add	r2, r1
 8003446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800344a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800344e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	440a      	add	r2, r1
 8003466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800346a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800346e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	43db      	mvns	r3, r3
 800348a:	68f9      	ldr	r1, [r7, #12]
 800348c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003490:	4013      	ands	r3, r2
 8003492:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	041b      	lsls	r3, r3, #16
 80034ac:	43db      	mvns	r3, r3
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034b4:	4013      	ands	r3, r2
 80034b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0159      	lsls	r1, r3, #5
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	440b      	add	r3, r1
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	4619      	mov	r1, r3
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <USB_DeactivateEndpoint+0x1b4>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	ec337800 	.word	0xec337800
 80034ec:	eff37800 	.word	0xeff37800

080034f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	2b01      	cmp	r3, #1
 800350e:	f040 815c 	bne.w	80037ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d132      	bne.n	8003580 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	0151      	lsls	r1, r2, #5
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	440a      	add	r2, r1
 8003530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800353c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	440a      	add	r2, r1
 8003554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800355c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	0151      	lsls	r1, r2, #5
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	440a      	add	r2, r1
 8003574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003578:	0cdb      	lsrs	r3, r3, #19
 800357a:	04db      	lsls	r3, r3, #19
 800357c:	6113      	str	r3, [r2, #16]
 800357e:	e074      	b.n	800366a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	0151      	lsls	r1, r2, #5
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	440a      	add	r2, r1
 8003596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359a:	0cdb      	lsrs	r3, r3, #19
 800359c:	04db      	lsls	r3, r3, #19
 800359e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	0151      	lsls	r1, r2, #5
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	440a      	add	r2, r1
 80035b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6959      	ldr	r1, [r3, #20]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	440b      	add	r3, r1
 80035dc:	1e59      	subs	r1, r3, #1
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80035e8:	4b9d      	ldr	r3, [pc, #628]	; (8003860 <USB_EPStartXfer+0x370>)
 80035ea:	400b      	ands	r3, r1
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	0148      	lsls	r0, r1, #5
 80035f0:	69f9      	ldr	r1, [r7, #28]
 80035f2:	4401      	add	r1, r0
 80035f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035f8:	4313      	orrs	r3, r2
 80035fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003612:	69b9      	ldr	r1, [r7, #24]
 8003614:	0148      	lsls	r0, r1, #5
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	4401      	add	r1, r0
 800361a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800361e:	4313      	orrs	r3, r2
 8003620:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	78db      	ldrb	r3, [r3, #3]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d11f      	bne.n	800366a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	4413      	add	r3, r2
 8003632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	0151      	lsls	r1, r2, #5
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	440a      	add	r2, r1
 8003640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003644:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003648:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	0151      	lsls	r1, r2, #5
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	440a      	add	r2, r1
 8003660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003668:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d14b      	bne.n	8003708 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d128      	bne.n	80036e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d110      	bne.n	80036c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	e00f      	b.n	80036e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	0151      	lsls	r1, r2, #5
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	440a      	add	r2, r1
 80036dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	0151      	lsls	r1, r2, #5
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	440a      	add	r2, r1
 80036fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003700:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e12f      	b.n	8003968 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	0151      	lsls	r1, r2, #5
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	440a      	add	r2, r1
 800371e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003726:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	78db      	ldrb	r3, [r3, #3]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d015      	beq.n	800375c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8117 	beq.w	8003968 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	2101      	movs	r1, #1
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	69f9      	ldr	r1, [r7, #28]
 8003752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003756:	4313      	orrs	r3, r2
 8003758:	634b      	str	r3, [r1, #52]	; 0x34
 800375a:	e105      	b.n	8003968 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d110      	bne.n	800378e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	0151      	lsls	r1, r2, #5
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	440a      	add	r2, r1
 8003782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	e00f      	b.n	80037ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	b298      	uxth	r0, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fa2b 	bl	8003c1e <USB_WritePacket>
 80037c8:	e0ce      	b.n	8003968 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e4:	0cdb      	lsrs	r3, r3, #19
 80037e6:	04db      	lsls	r3, r3, #19
 80037e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800380c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d126      	bne.n	8003864 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	69b9      	ldr	r1, [r7, #24]
 800382e:	0148      	lsls	r0, r1, #5
 8003830:	69f9      	ldr	r1, [r7, #28]
 8003832:	4401      	add	r1, r0
 8003834:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003838:	4313      	orrs	r3, r2
 800383a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003856:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800385a:	6113      	str	r3, [r2, #16]
 800385c:	e036      	b.n	80038cc <USB_EPStartXfer+0x3dc>
 800385e:	bf00      	nop
 8003860:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4413      	add	r3, r2
 800386e:	1e5a      	subs	r2, r3, #1
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	8afb      	ldrh	r3, [r7, #22]
 800388a:	04d9      	lsls	r1, r3, #19
 800388c:	4b39      	ldr	r3, [pc, #228]	; (8003974 <USB_EPStartXfer+0x484>)
 800388e:	400b      	ands	r3, r1
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	0148      	lsls	r0, r1, #5
 8003894:	69f9      	ldr	r1, [r7, #28]
 8003896:	4401      	add	r1, r0
 8003898:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800389c:	4313      	orrs	r3, r2
 800389e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	8af9      	ldrh	r1, [r7, #22]
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038bc:	69b9      	ldr	r1, [r7, #24]
 80038be:	0148      	lsls	r0, r1, #5
 80038c0:	69f9      	ldr	r1, [r7, #28]
 80038c2:	4401      	add	r1, r0
 80038c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038c8:	4313      	orrs	r3, r2
 80038ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10d      	bne.n	80038ee <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ea:	460a      	mov	r2, r1
 80038ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	78db      	ldrb	r3, [r3, #3]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d128      	bne.n	8003948 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d110      	bne.n	8003928 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	0151      	lsls	r1, r2, #5
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	440a      	add	r2, r1
 800391c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	e00f      	b.n	8003948 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	0151      	lsls	r1, r2, #5
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	440a      	add	r2, r1
 800393e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	0151      	lsls	r1, r2, #5
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	440a      	add	r2, r1
 800395e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	1ff80000 	.word	0x1ff80000

08003978 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	4613      	mov	r3, r2
 8003984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 80cd 	bne.w	8003b34 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d132      	bne.n	8003a08 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	0151      	lsls	r1, r2, #5
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	440a      	add	r2, r1
 80039b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	0151      	lsls	r1, r2, #5
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	440a      	add	r2, r1
 80039fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a00:	0cdb      	lsrs	r3, r3, #19
 8003a02:	04db      	lsls	r3, r3, #19
 8003a04:	6113      	str	r3, [r2, #16]
 8003a06:	e04e      	b.n	8003aa6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a22:	0cdb      	lsrs	r3, r3, #19
 8003a24:	04db      	lsls	r3, r3, #19
 8003a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a4a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	695a      	ldr	r2, [r3, #20]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d903      	bls.n	8003a60 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a96:	6939      	ldr	r1, [r7, #16]
 8003a98:	0148      	lsls	r0, r1, #5
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	4401      	add	r1, r0
 8003a9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d11e      	bne.n	8003aea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d009      	beq.n	8003ac8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e092      	b.n	8003c10 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b08:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d07e      	beq.n	8003c10 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	6979      	ldr	r1, [r7, #20]
 8003b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	634b      	str	r3, [r1, #52]	; 0x34
 8003b32:	e06d      	b.n	8003c10 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4e:	0cdb      	lsrs	r3, r3, #19
 8003b50:	04db      	lsls	r3, r3, #19
 8003b52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b76:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ba6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbe:	6939      	ldr	r1, [r7, #16]
 8003bc0:	0148      	lsls	r0, r1, #5
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	4401      	add	r1, r0
 8003bc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10d      	bne.n	8003bf0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	68d9      	ldr	r1, [r3, #12]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	460a      	mov	r2, r1
 8003bee:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b089      	sub	sp, #36	; 0x24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	4611      	mov	r1, r2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	71fb      	strb	r3, [r7, #7]
 8003c30:	4613      	mov	r3, r2
 8003c32:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d123      	bne.n	8003c8c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c44:	88bb      	ldrh	r3, [r7, #4]
 8003c46:	3303      	adds	r3, #3
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e018      	b.n	8003c84 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	031a      	lsls	r2, r3, #12
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5e:	461a      	mov	r2, r3
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3301      	adds	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d3e2      	bcc.n	8003c52 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3724      	adds	r7, #36	; 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b08b      	sub	sp, #44	; 0x2c
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	e014      	b.n	8003cf0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	3301      	adds	r3, #1
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	3301      	adds	r3, #1
 8003cee:	623b      	str	r3, [r7, #32]
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3e6      	bcc.n	8003cc6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cf8:	8bfb      	ldrh	r3, [r7, #30]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01e      	beq.n	8003d3c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d08:	461a      	mov	r2, r3
 8003d0a:	f107 0310 	add.w	r3, r7, #16
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	701a      	strb	r2, [r3, #0]
      i++;
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	3301      	adds	r3, #1
 8003d28:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d30:	8bfb      	ldrh	r3, [r7, #30]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d36:	8bfb      	ldrh	r3, [r7, #30]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ea      	bne.n	8003d12 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	372c      	adds	r7, #44	; 0x2c
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d12c      	bne.n	8003dc0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	db12      	blt.n	8003d9e <USB_EPSetStall+0x54>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00f      	beq.n	8003d9e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d9c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e02b      	b.n	8003e18 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	db12      	blt.n	8003df8 <USB_EPSetStall+0xae>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003df6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d128      	bne.n	8003e94 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	78db      	ldrb	r3, [r3, #3]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d003      	beq.n	8003e72 <USB_EPClearStall+0x4c>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d138      	bne.n	8003ee4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e027      	b.n	8003ee4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003eb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	78db      	ldrb	r3, [r3, #3]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d003      	beq.n	8003ec4 <USB_EPClearStall+0x9e>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	78db      	ldrb	r3, [r3, #3]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d10f      	bne.n	8003ee4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f10:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f14:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b085      	sub	sp, #20
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6c:	f023 0302 	bic.w	r3, r3, #2
 8003f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fae:	f043 0302 	orr.w	r3, r3, #2
 8003fb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	0c1b      	lsrs	r3, r3, #16
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	b29b      	uxth	r3, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800407e:	68bb      	ldr	r3, [r7, #8]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	01db      	lsls	r3, r3, #7
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040da:	68bb      	ldr	r3, [r7, #8]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0301 	and.w	r3, r3, #1
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800411e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	460b      	mov	r3, r1
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	333c      	adds	r3, #60	; 0x3c
 8004162:	3304      	adds	r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4a26      	ldr	r2, [pc, #152]	; (8004204 <USB_EP0_OutStart+0xb8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d90a      	bls.n	8004186 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800417c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004180:	d101      	bne.n	8004186 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e037      	b.n	80041f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	2300      	movs	r3, #0
 8004190:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b4:	f043 0318 	orr.w	r3, r3, #24
 80041b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80041cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80041ce:	7afb      	ldrb	r3, [r7, #11]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10f      	bne.n	80041f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80041f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	4f54300a 	.word	0x4f54300a

08004208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3301      	adds	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	4a13      	ldr	r2, [pc, #76]	; (8004268 <USB_CoreReset+0x60>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d901      	bls.n	8004224 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e01a      	b.n	800425a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	daf3      	bge.n	8004214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <USB_CoreReset+0x60>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e006      	b.n	800425a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d0f1      	beq.n	800423c <USB_CoreReset+0x34>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	00030d40 	.word	0x00030d40

0800426c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004278:	2010      	movs	r0, #16
 800427a:	f001 ff03 	bl	8006084 <USBD_static_malloc>
 800427e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800428e:	2302      	movs	r3, #2
 8004290:	e01b      	b.n	80042ca <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7c1b      	ldrb	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2207      	movs	r2, #7
 80042a6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80042a8:	e002      	b.n	80042b0 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	220a      	movs	r2, #10
 80042ae:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80042b0:	2304      	movs	r3, #4
 80042b2:	2203      	movs	r2, #3
 80042b4:	2181      	movs	r1, #129	; 0x81
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 fdd3 	bl	8005e62 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80042de:	2181      	movs	r1, #129	; 0x81
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 fde4 	bl	8005eae <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004302:	4618      	mov	r0, r3
 8004304:	f001 fecc 	bl	80060a0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800432c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800433c:	2303      	movs	r3, #3
 800433e:	e0e8      	b.n	8004512 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004348:	2b00      	cmp	r3, #0
 800434a:	d046      	beq.n	80043da <USBD_HID_Setup+0xbe>
 800434c:	2b20      	cmp	r3, #32
 800434e:	f040 80d8 	bne.w	8004502 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	3b02      	subs	r3, #2
 8004358:	2b09      	cmp	r3, #9
 800435a:	d836      	bhi.n	80043ca <USBD_HID_Setup+0xae>
 800435c:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <USBD_HID_Setup+0x48>)
 800435e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004362:	bf00      	nop
 8004364:	080043bb 	.word	0x080043bb
 8004368:	0800439b 	.word	0x0800439b
 800436c:	080043cb 	.word	0x080043cb
 8004370:	080043cb 	.word	0x080043cb
 8004374:	080043cb 	.word	0x080043cb
 8004378:	080043cb 	.word	0x080043cb
 800437c:	080043cb 	.word	0x080043cb
 8004380:	080043cb 	.word	0x080043cb
 8004384:	080043a9 	.word	0x080043a9
 8004388:	0800438d 	.word	0x0800438d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	885b      	ldrh	r3, [r3, #2]
 8004390:	b2db      	uxtb	r3, r3
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]
          break;
 8004398:	e01e      	b.n	80043d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f001 fa22 	bl	80057ea <USBD_CtlSendData>
          break;
 80043a6:	e017      	b.n	80043d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	885b      	ldrh	r3, [r3, #2]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	605a      	str	r2, [r3, #4]
          break;
 80043b8:	e00e      	b.n	80043d8 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3304      	adds	r3, #4
 80043be:	2201      	movs	r2, #1
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 fa11 	bl	80057ea <USBD_CtlSendData>
          break;
 80043c8:	e006      	b.n	80043d8 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80043ca:	6839      	ldr	r1, [r7, #0]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f001 f99b 	bl	8005708 <USBD_CtlError>
          ret = USBD_FAIL;
 80043d2:	2303      	movs	r3, #3
 80043d4:	75fb      	strb	r3, [r7, #23]
          break;
 80043d6:	bf00      	nop
      }
      break;
 80043d8:	e09a      	b.n	8004510 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b0b      	cmp	r3, #11
 80043e0:	f200 8086 	bhi.w	80044f0 <USBD_HID_Setup+0x1d4>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <USBD_HID_Setup+0xd0>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	080044ff 	.word	0x080044ff
 80043f4:	080044f1 	.word	0x080044f1
 80043f8:	080044f1 	.word	0x080044f1
 80043fc:	080044f1 	.word	0x080044f1
 8004400:	080044f1 	.word	0x080044f1
 8004404:	08004447 	.word	0x08004447
 8004408:	080044f1 	.word	0x080044f1
 800440c:	080044f1 	.word	0x080044f1
 8004410:	080044f1 	.word	0x080044f1
 8004414:	0800449f 	.word	0x0800449f
 8004418:	080044c9 	.word	0x080044c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b03      	cmp	r3, #3
 8004426:	d107      	bne.n	8004438 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004428:	f107 030a 	add.w	r3, r7, #10
 800442c:	2202      	movs	r2, #2
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f001 f9da 	bl	80057ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004436:	e063      	b.n	8004500 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f001 f964 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 8004440:	2303      	movs	r3, #3
 8004442:	75fb      	strb	r3, [r7, #23]
          break;
 8004444:	e05c      	b.n	8004500 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	885b      	ldrh	r3, [r3, #2]
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b22      	cmp	r3, #34	; 0x22
 8004450:	d108      	bne.n	8004464 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	88db      	ldrh	r3, [r3, #6]
 8004456:	2b3f      	cmp	r3, #63	; 0x3f
 8004458:	bf28      	it	cs
 800445a:	233f      	movcs	r3, #63	; 0x3f
 800445c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <USBD_HID_Setup+0x200>)
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e015      	b.n	8004490 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	885b      	ldrh	r3, [r3, #2]
 8004468:	0a1b      	lsrs	r3, r3, #8
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b21      	cmp	r3, #33	; 0x21
 800446e:	d108      	bne.n	8004482 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004470:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <USBD_HID_Setup+0x204>)
 8004472:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	88db      	ldrh	r3, [r3, #6]
 8004478:	2b09      	cmp	r3, #9
 800447a:	bf28      	it	cs
 800447c:	2309      	movcs	r3, #9
 800447e:	82bb      	strh	r3, [r7, #20]
 8004480:	e006      	b.n	8004490 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f001 f93f 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 800448a:	2303      	movs	r3, #3
 800448c:	75fb      	strb	r3, [r7, #23]
            break;
 800448e:	e037      	b.n	8004500 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004490:	8abb      	ldrh	r3, [r7, #20]
 8004492:	461a      	mov	r2, r3
 8004494:	6939      	ldr	r1, [r7, #16]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 f9a7 	bl	80057ea <USBD_CtlSendData>
          break;
 800449c:	e030      	b.n	8004500 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3308      	adds	r3, #8
 80044ae:	2201      	movs	r2, #1
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f001 f999 	bl	80057ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044b8:	e022      	b.n	8004500 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f001 f923 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 80044c2:	2303      	movs	r3, #3
 80044c4:	75fb      	strb	r3, [r7, #23]
          break;
 80044c6:	e01b      	b.n	8004500 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d106      	bne.n	80044e2 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	885b      	ldrh	r3, [r3, #2]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80044e0:	e00e      	b.n	8004500 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f001 f90f 	bl	8005708 <USBD_CtlError>
            ret = USBD_FAIL;
 80044ea:	2303      	movs	r3, #3
 80044ec:	75fb      	strb	r3, [r7, #23]
          break;
 80044ee:	e007      	b.n	8004500 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80044f0:	6839      	ldr	r1, [r7, #0]
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 f908 	bl	8005708 <USBD_CtlError>
          ret = USBD_FAIL;
 80044f8:	2303      	movs	r3, #3
 80044fa:	75fb      	strb	r3, [r7, #23]
          break;
 80044fc:	e000      	b.n	8004500 <USBD_HID_Setup+0x1e4>
          break;
 80044fe:	bf00      	nop
      }
      break;
 8004500:	e006      	b.n	8004510 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 8004502:	6839      	ldr	r1, [r7, #0]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 f8ff 	bl	8005708 <USBD_CtlError>
      ret = USBD_FAIL;
 800450a:	2303      	movs	r3, #3
 800450c:	75fb      	strb	r3, [r7, #23]
      break;
 800450e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004510:	7dfb      	ldrb	r3, [r7, #23]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	200000c8 	.word	0x200000c8
 8004520:	200000b0 	.word	0x200000b0

08004524 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004538:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d101      	bne.n	8004544 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 8004540:	2303      	movs	r3, #3
 8004542:	e013      	b.n	800456c <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b03      	cmp	r3, #3
 800454e:	d10c      	bne.n	800456a <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	7b1b      	ldrb	r3, [r3, #12]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2201      	movs	r2, #1
 800455c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	2181      	movs	r1, #129	; 0x81
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f001 fd4a 	bl	8005ffe <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2222      	movs	r2, #34	; 0x22
 8004580:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004582:	4b03      	ldr	r3, [pc, #12]	; (8004590 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	20000044 	.word	0x20000044

08004594 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2222      	movs	r2, #34	; 0x22
 80045a0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 80045a2:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000068 	.word	0x20000068

080045b4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2222      	movs	r2, #34	; 0x22
 80045c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 80045c2:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	2000008c 	.word	0x2000008c

080045d4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045e6:	2200      	movs	r2, #0
 80045e8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	220a      	movs	r2, #10
 8004604:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004606:	4b03      	ldr	r3, [pc, #12]	; (8004614 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	200000bc 	.word	0x200000bc

08004618 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	4613      	mov	r3, r2
 8004624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800462c:	2303      	movs	r3, #3
 800462e:	e01f      	b.n	8004670 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	79fa      	ldrb	r2, [r7, #7]
 8004662:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f001 fb95 	bl	8005d94 <USBD_LL_Init>
 800466a:	4603      	mov	r3, r0
 800466c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800468c:	2303      	movs	r3, #3
 800468e:	e016      	b.n	80046be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	f107 020e 	add.w	r2, r7, #14
 80046b0:	4610      	mov	r0, r2
 80046b2:	4798      	blx	r3
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f001 fbac 	bl	8005e2c <USBD_LL_Start>
 80046d4:	4603      	mov	r3, r0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004700:	2303      	movs	r3, #3
 8004702:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	4611      	mov	r1, r2
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
 800471e:	4603      	mov	r3, r0
 8004720:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	4611      	mov	r1, r2
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
  }

  return USBD_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ff90 	bl	8005694 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004782:	461a      	mov	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2b02      	cmp	r3, #2
 8004796:	d01a      	beq.n	80047ce <USBD_LL_SetupStage+0x72>
 8004798:	2b02      	cmp	r3, #2
 800479a:	d822      	bhi.n	80047e2 <USBD_LL_SetupStage+0x86>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <USBD_LL_SetupStage+0x4a>
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d00a      	beq.n	80047ba <USBD_LL_SetupStage+0x5e>
 80047a4:	e01d      	b.n	80047e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047ac:	4619      	mov	r1, r3
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa62 	bl	8004c78 <USBD_StdDevReq>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
      break;
 80047b8:	e020      	b.n	80047fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fac6 	bl	8004d54 <USBD_StdItfReq>
 80047c8:	4603      	mov	r3, r0
 80047ca:	73fb      	strb	r3, [r7, #15]
      break;
 80047cc:	e016      	b.n	80047fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fb05 	bl	8004de6 <USBD_StdEPReq>
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]
      break;
 80047e0:	e00c      	b.n	80047fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80047e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	4619      	mov	r1, r3
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fb7b 	bl	8005eec <USBD_LL_StallEP>
 80047f6:	4603      	mov	r3, r0
 80047f8:	73fb      	strb	r3, [r7, #15]
      break;
 80047fa:	bf00      	nop
  }

  return ret;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	460b      	mov	r3, r1
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004814:	7afb      	ldrb	r3, [r7, #11]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d138      	bne.n	800488c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004820:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004828:	2b03      	cmp	r3, #3
 800482a:	d14a      	bne.n	80048c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d913      	bls.n	8004860 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	1ad2      	subs	r2, r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4293      	cmp	r3, r2
 8004850:	bf28      	it	cs
 8004852:	4613      	movcs	r3, r2
 8004854:	461a      	mov	r2, r3
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fff2 	bl	8005842 <USBD_CtlContinueRx>
 800485e:	e030      	b.n	80048c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b03      	cmp	r3, #3
 800486a:	d10b      	bne.n	8004884 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 ffed 	bl	8005864 <USBD_CtlSendStatus>
 800488a:	e01a      	b.n	80048c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b03      	cmp	r3, #3
 8004896:	d114      	bne.n	80048c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00e      	beq.n	80048c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	7afa      	ldrb	r2, [r7, #11]
 80048ae:	4611      	mov	r1, r2
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	4798      	blx	r3
 80048b4:	4603      	mov	r3, r0
 80048b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80048be:	7dfb      	ldrb	r3, [r7, #23]
 80048c0:	e000      	b.n	80048c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	460b      	mov	r3, r1
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d16b      	bne.n	80049b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3314      	adds	r3, #20
 80048e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d156      	bne.n	800499e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d914      	bls.n	8004926 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	1ad2      	subs	r2, r2, r3
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	461a      	mov	r2, r3
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 ff84 	bl	8005820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004918:	2300      	movs	r3, #0
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f001 fb8e 	bl	8006040 <USBD_LL_PrepareReceive>
 8004924:	e03b      	b.n	800499e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	d11c      	bne.n	800496c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800493a:	429a      	cmp	r2, r3
 800493c:	d316      	bcc.n	800496c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004948:	429a      	cmp	r2, r3
 800494a:	d20f      	bcs.n	800496c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	2100      	movs	r1, #0
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 ff65 	bl	8005820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800495e:	2300      	movs	r3, #0
 8004960:	2200      	movs	r2, #0
 8004962:	2100      	movs	r1, #0
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f001 fb6b 	bl	8006040 <USBD_LL_PrepareReceive>
 800496a:	e018      	b.n	800499e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b03      	cmp	r3, #3
 8004976:	d10b      	bne.n	8004990 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 faaa 	bl	8005eec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 ff76 	bl	800588a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d122      	bne.n	80049ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fe98 	bl	80046de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80049b6:	e01a      	b.n	80049ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d114      	bne.n	80049ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00e      	beq.n	80049ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	7afa      	ldrb	r2, [r7, #11]
 80049da:	4611      	mov	r1, r2
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	4798      	blx	r3
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	e000      	b.n	80049f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e02f      	b.n	8004a8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00f      	beq.n	8004a56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6852      	ldr	r2, [r2, #4]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	4611      	mov	r1, r2
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 fa00 	bl	8005e62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2240      	movs	r2, #64	; 0x40
 8004a6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a72:	2340      	movs	r3, #64	; 0x40
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 f9f2 	bl	8005e62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2240      	movs	r2, #64	; 0x40
 8004a88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2204      	movs	r2, #4
 8004ace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d106      	bne.n	8004b02 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e012      	b.n	8004b4c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d10b      	bne.n	8004b4a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e014      	b.n	8004b98 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d10d      	bne.n	8004b96 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	4611      	mov	r1, r2
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e014      	b.n	8004be4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d10d      	bne.n	8004be2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d007      	beq.n	8004be2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	4611      	mov	r1, r2
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6852      	ldr	r2, [r2, #4]
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	4798      	blx	r3
  }

  return USBD_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004c58:	8a3b      	ldrh	r3, [r7, #16]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	b21a      	sxth	r2, r3
 8004c5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b21b      	sxth	r3, r3
 8004c66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004c68:	89fb      	ldrh	r3, [r7, #14]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	371c      	adds	r7, #28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d005      	beq.n	8004c9e <USBD_StdDevReq+0x26>
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d853      	bhi.n	8004d3e <USBD_StdDevReq+0xc6>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <USBD_StdDevReq+0x3a>
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d14f      	bne.n	8004d3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	6839      	ldr	r1, [r7, #0]
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb0:	e04a      	b.n	8004d48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	2b09      	cmp	r3, #9
 8004cb8:	d83b      	bhi.n	8004d32 <USBD_StdDevReq+0xba>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <USBD_StdDevReq+0x48>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004d15 	.word	0x08004d15
 8004cc4:	08004d29 	.word	0x08004d29
 8004cc8:	08004d33 	.word	0x08004d33
 8004ccc:	08004d1f 	.word	0x08004d1f
 8004cd0:	08004d33 	.word	0x08004d33
 8004cd4:	08004cf3 	.word	0x08004cf3
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004d33 	.word	0x08004d33
 8004ce0:	08004d0b 	.word	0x08004d0b
 8004ce4:	08004cfd 	.word	0x08004cfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9de 	bl	80050ac <USBD_GetDescriptor>
          break;
 8004cf0:	e024      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb43 	bl	8005380 <USBD_SetAddress>
          break;
 8004cfa:	e01f      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fb82 	bl	8005408 <USBD_SetConfig>
 8004d04:	4603      	mov	r3, r0
 8004d06:	73fb      	strb	r3, [r7, #15]
          break;
 8004d08:	e018      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fc21 	bl	8005554 <USBD_GetConfig>
          break;
 8004d12:	e013      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fc52 	bl	80055c0 <USBD_GetStatus>
          break;
 8004d1c:	e00e      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 fc81 	bl	8005628 <USBD_SetFeature>
          break;
 8004d26:	e009      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fc90 	bl	8005650 <USBD_ClrFeature>
          break;
 8004d30:	e004      	b.n	8004d3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fce7 	bl	8005708 <USBD_CtlError>
          break;
 8004d3a:	bf00      	nop
      }
      break;
 8004d3c:	e004      	b.n	8004d48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fce1 	bl	8005708 <USBD_CtlError>
      break;
 8004d46:	bf00      	nop
  }

  return ret;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop

08004d54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d005      	beq.n	8004d7a <USBD_StdItfReq+0x26>
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d82f      	bhi.n	8004dd2 <USBD_StdItfReq+0x7e>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <USBD_StdItfReq+0x26>
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d12b      	bne.n	8004dd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d81d      	bhi.n	8004dc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	889b      	ldrh	r3, [r3, #4]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d813      	bhi.n	8004dba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4798      	blx	r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	88db      	ldrh	r3, [r3, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d110      	bne.n	8004dce <USBD_StdItfReq+0x7a>
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fd56 	bl	8005864 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004db8:	e009      	b.n	8004dce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fca3 	bl	8005708 <USBD_CtlError>
          break;
 8004dc2:	e004      	b.n	8004dce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fc9e 	bl	8005708 <USBD_CtlError>
          break;
 8004dcc:	e000      	b.n	8004dd0 <USBD_StdItfReq+0x7c>
          break;
 8004dce:	bf00      	nop
      }
      break;
 8004dd0:	e004      	b.n	8004ddc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fc97 	bl	8005708 <USBD_CtlError>
      break;
 8004dda:	bf00      	nop
  }

  return ret;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b084      	sub	sp, #16
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	889b      	ldrh	r3, [r3, #4]
 8004df8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d007      	beq.n	8004e16 <USBD_StdEPReq+0x30>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	f200 8145 	bhi.w	8005096 <USBD_StdEPReq+0x2b0>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <USBD_StdEPReq+0x44>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	f040 8140 	bne.w	8005096 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	4798      	blx	r3
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
      break;
 8004e28:	e13a      	b.n	80050a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d007      	beq.n	8004e42 <USBD_StdEPReq+0x5c>
 8004e32:	2b03      	cmp	r3, #3
 8004e34:	f300 8129 	bgt.w	800508a <USBD_StdEPReq+0x2a4>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d07f      	beq.n	8004f3c <USBD_StdEPReq+0x156>
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d03c      	beq.n	8004eba <USBD_StdEPReq+0xd4>
 8004e40:	e123      	b.n	800508a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d002      	beq.n	8004e54 <USBD_StdEPReq+0x6e>
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d016      	beq.n	8004e80 <USBD_StdEPReq+0x9a>
 8004e52:	e02c      	b.n	8004eae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <USBD_StdEPReq+0x90>
 8004e5a:	7bbb      	ldrb	r3, [r7, #14]
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d00a      	beq.n	8004e76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e60:	7bbb      	ldrb	r3, [r7, #14]
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f001 f841 	bl	8005eec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e6a:	2180      	movs	r1, #128	; 0x80
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f83d 	bl	8005eec <USBD_LL_StallEP>
 8004e72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004e74:	e020      	b.n	8004eb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fc45 	bl	8005708 <USBD_CtlError>
              break;
 8004e7e:	e01b      	b.n	8004eb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	885b      	ldrh	r3, [r3, #2]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10e      	bne.n	8004ea6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004e88:	7bbb      	ldrb	r3, [r7, #14]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00b      	beq.n	8004ea6 <USBD_StdEPReq+0xc0>
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d008      	beq.n	8004ea6 <USBD_StdEPReq+0xc0>
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	88db      	ldrh	r3, [r3, #6]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e9c:	7bbb      	ldrb	r3, [r7, #14]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 f823 	bl	8005eec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fcdc 	bl	8005864 <USBD_CtlSendStatus>

              break;
 8004eac:	e004      	b.n	8004eb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fc29 	bl	8005708 <USBD_CtlError>
              break;
 8004eb6:	bf00      	nop
          }
          break;
 8004eb8:	e0ec      	b.n	8005094 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d002      	beq.n	8004ecc <USBD_StdEPReq+0xe6>
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d016      	beq.n	8004ef8 <USBD_StdEPReq+0x112>
 8004eca:	e030      	b.n	8004f2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ecc:	7bbb      	ldrb	r3, [r7, #14]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <USBD_StdEPReq+0x108>
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	2b80      	cmp	r3, #128	; 0x80
 8004ed6:	d00a      	beq.n	8004eee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f001 f805 	bl	8005eec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 f801 	bl	8005eec <USBD_LL_StallEP>
 8004eea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004eec:	e025      	b.n	8004f3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fc09 	bl	8005708 <USBD_CtlError>
              break;
 8004ef6:	e020      	b.n	8004f3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	885b      	ldrh	r3, [r3, #2]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11b      	bne.n	8004f38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f001 f80b 	bl	8005f2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fca5 	bl	8005864 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004f2c:	e004      	b.n	8004f38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbe9 	bl	8005708 <USBD_CtlError>
              break;
 8004f36:	e000      	b.n	8004f3a <USBD_StdEPReq+0x154>
              break;
 8004f38:	bf00      	nop
          }
          break;
 8004f3a:	e0ab      	b.n	8005094 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d002      	beq.n	8004f4e <USBD_StdEPReq+0x168>
 8004f48:	2b03      	cmp	r3, #3
 8004f4a:	d032      	beq.n	8004fb2 <USBD_StdEPReq+0x1cc>
 8004f4c:	e097      	b.n	800507e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f4e:	7bbb      	ldrb	r3, [r7, #14]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <USBD_StdEPReq+0x17e>
 8004f54:	7bbb      	ldrb	r3, [r7, #14]
 8004f56:	2b80      	cmp	r3, #128	; 0x80
 8004f58:	d004      	beq.n	8004f64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fbd3 	bl	8005708 <USBD_CtlError>
                break;
 8004f62:	e091      	b.n	8005088 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da0b      	bge.n	8004f84 <USBD_StdEPReq+0x19e>
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	3310      	adds	r3, #16
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	3304      	adds	r3, #4
 8004f82:	e00b      	b.n	8004f9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fc1d 	bl	80057ea <USBD_CtlSendData>
              break;
 8004fb0:	e06a      	b.n	8005088 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	da11      	bge.n	8004fde <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fba:	7bbb      	ldrb	r3, [r7, #14]
 8004fbc:	f003 020f 	and.w	r2, r3, #15
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3324      	adds	r3, #36	; 0x24
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d117      	bne.n	8005004 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fb96 	bl	8005708 <USBD_CtlError>
                  break;
 8004fdc:	e054      	b.n	8005088 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fde:	7bbb      	ldrb	r3, [r7, #14]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fb83 	bl	8005708 <USBD_CtlError>
                  break;
 8005002:	e041      	b.n	8005088 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0b      	bge.n	8005024 <USBD_StdEPReq+0x23e>
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	3310      	adds	r3, #16
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	3304      	adds	r3, #4
 8005022:	e00b      	b.n	800503c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4413      	add	r3, r2
 800503a:	3304      	adds	r3, #4
 800503c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <USBD_StdEPReq+0x264>
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d103      	bne.n	8005052 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	e00e      	b.n	8005070 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005052:	7bbb      	ldrb	r3, [r7, #14]
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 ff86 	bl	8005f68 <USBD_LL_IsStallEP>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e002      	b.n	8005070 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2202      	movs	r2, #2
 8005074:	4619      	mov	r1, r3
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fbb7 	bl	80057ea <USBD_CtlSendData>
              break;
 800507c:	e004      	b.n	8005088 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fb41 	bl	8005708 <USBD_CtlError>
              break;
 8005086:	bf00      	nop
          }
          break;
 8005088:	e004      	b.n	8005094 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb3b 	bl	8005708 <USBD_CtlError>
          break;
 8005092:	bf00      	nop
      }
      break;
 8005094:	e004      	b.n	80050a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb35 	bl	8005708 <USBD_CtlError>
      break;
 800509e:	bf00      	nop
  }

  return ret;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	885b      	ldrh	r3, [r3, #2]
 80050c6:	0a1b      	lsrs	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	2b06      	cmp	r3, #6
 80050ce:	f200 8128 	bhi.w	8005322 <USBD_GetDescriptor+0x276>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <USBD_GetDescriptor+0x2c>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	0800510d 	.word	0x0800510d
 80050e0:	0800514d 	.word	0x0800514d
 80050e4:	08005323 	.word	0x08005323
 80050e8:	08005323 	.word	0x08005323
 80050ec:	080052c3 	.word	0x080052c3
 80050f0:	080052ef 	.word	0x080052ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	7c12      	ldrb	r2, [r2, #16]
 8005100:	f107 0108 	add.w	r1, r7, #8
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
 8005108:	60f8      	str	r0, [r7, #12]
      break;
 800510a:	e112      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	7c1b      	ldrb	r3, [r3, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10d      	bne.n	8005130 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	f107 0208 	add.w	r2, r7, #8
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
 8005124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	3301      	adds	r3, #1
 800512a:	2202      	movs	r2, #2
 800512c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800512e:	e100      	b.n	8005332 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	f107 0208 	add.w	r2, r7, #8
 800513c:	4610      	mov	r0, r2
 800513e:	4798      	blx	r3
 8005140:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3301      	adds	r3, #1
 8005146:	2202      	movs	r2, #2
 8005148:	701a      	strb	r2, [r3, #0]
      break;
 800514a:	e0f2      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	885b      	ldrh	r3, [r3, #2]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b05      	cmp	r3, #5
 8005154:	f200 80ac 	bhi.w	80052b0 <USBD_GetDescriptor+0x204>
 8005158:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <USBD_GetDescriptor+0xb4>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	08005179 	.word	0x08005179
 8005164:	080051ad 	.word	0x080051ad
 8005168:	080051e1 	.word	0x080051e1
 800516c:	08005215 	.word	0x08005215
 8005170:	08005249 	.word	0x08005249
 8005174:	0800527d 	.word	0x0800527d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	7c12      	ldrb	r2, [r2, #16]
 8005190:	f107 0108 	add.w	r1, r7, #8
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
 8005198:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800519a:	e091      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fab2 	bl	8005708 <USBD_CtlError>
            err++;
 80051a4:	7afb      	ldrb	r3, [r7, #11]
 80051a6:	3301      	adds	r3, #1
 80051a8:	72fb      	strb	r3, [r7, #11]
          break;
 80051aa:	e089      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	7c12      	ldrb	r2, [r2, #16]
 80051c4:	f107 0108 	add.w	r1, r7, #8
 80051c8:	4610      	mov	r0, r2
 80051ca:	4798      	blx	r3
 80051cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051ce:	e077      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa98 	bl	8005708 <USBD_CtlError>
            err++;
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	3301      	adds	r3, #1
 80051dc:	72fb      	strb	r3, [r7, #11]
          break;
 80051de:	e06f      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00b      	beq.n	8005204 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	7c12      	ldrb	r2, [r2, #16]
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	4610      	mov	r0, r2
 80051fe:	4798      	blx	r3
 8005200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005202:	e05d      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005204:	6839      	ldr	r1, [r7, #0]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa7e 	bl	8005708 <USBD_CtlError>
            err++;
 800520c:	7afb      	ldrb	r3, [r7, #11]
 800520e:	3301      	adds	r3, #1
 8005210:	72fb      	strb	r3, [r7, #11]
          break;
 8005212:	e055      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	7c12      	ldrb	r2, [r2, #16]
 800522c:	f107 0108 	add.w	r1, r7, #8
 8005230:	4610      	mov	r0, r2
 8005232:	4798      	blx	r3
 8005234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005236:	e043      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005238:	6839      	ldr	r1, [r7, #0]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa64 	bl	8005708 <USBD_CtlError>
            err++;
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	3301      	adds	r3, #1
 8005244:	72fb      	strb	r3, [r7, #11]
          break;
 8005246:	e03b      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	7c12      	ldrb	r2, [r2, #16]
 8005260:	f107 0108 	add.w	r1, r7, #8
 8005264:	4610      	mov	r0, r2
 8005266:	4798      	blx	r3
 8005268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800526a:	e029      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa4a 	bl	8005708 <USBD_CtlError>
            err++;
 8005274:	7afb      	ldrb	r3, [r7, #11]
 8005276:	3301      	adds	r3, #1
 8005278:	72fb      	strb	r3, [r7, #11]
          break;
 800527a:	e021      	b.n	80052c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	7c12      	ldrb	r2, [r2, #16]
 8005294:	f107 0108 	add.w	r1, r7, #8
 8005298:	4610      	mov	r0, r2
 800529a:	4798      	blx	r3
 800529c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800529e:	e00f      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa30 	bl	8005708 <USBD_CtlError>
            err++;
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	3301      	adds	r3, #1
 80052ac:	72fb      	strb	r3, [r7, #11]
          break;
 80052ae:	e007      	b.n	80052c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa28 	bl	8005708 <USBD_CtlError>
          err++;
 80052b8:	7afb      	ldrb	r3, [r7, #11]
 80052ba:	3301      	adds	r3, #1
 80052bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80052be:	bf00      	nop
      }
      break;
 80052c0:	e037      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7c1b      	ldrb	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	4610      	mov	r0, r2
 80052d8:	4798      	blx	r3
 80052da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052dc:	e029      	b.n	8005332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa11 	bl	8005708 <USBD_CtlError>
        err++;
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	3301      	adds	r3, #1
 80052ea:	72fb      	strb	r3, [r7, #11]
      break;
 80052ec:	e021      	b.n	8005332 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7c1b      	ldrb	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	f107 0208 	add.w	r2, r7, #8
 8005302:	4610      	mov	r0, r2
 8005304:	4798      	blx	r3
 8005306:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3301      	adds	r3, #1
 800530c:	2207      	movs	r2, #7
 800530e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005310:	e00f      	b.n	8005332 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f9f7 	bl	8005708 <USBD_CtlError>
        err++;
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	3301      	adds	r3, #1
 800531e:	72fb      	strb	r3, [r7, #11]
      break;
 8005320:	e007      	b.n	8005332 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f9ef 	bl	8005708 <USBD_CtlError>
      err++;
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	3301      	adds	r3, #1
 800532e:	72fb      	strb	r3, [r7, #11]
      break;
 8005330:	bf00      	nop
  }

  if (err != 0U)
 8005332:	7afb      	ldrb	r3, [r7, #11]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d11e      	bne.n	8005376 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	88db      	ldrh	r3, [r3, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005340:	893b      	ldrh	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00e      	beq.n	8005364 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	88da      	ldrh	r2, [r3, #6]
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	4293      	cmp	r3, r2
 800534e:	bf28      	it	cs
 8005350:	4613      	movcs	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005356:	893b      	ldrh	r3, [r7, #8]
 8005358:	461a      	mov	r2, r3
 800535a:	68f9      	ldr	r1, [r7, #12]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa44 	bl	80057ea <USBD_CtlSendData>
 8005362:	e009      	b.n	8005378 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9ce 	bl	8005708 <USBD_CtlError>
 800536c:	e004      	b.n	8005378 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa78 	bl	8005864 <USBD_CtlSendStatus>
 8005374:	e000      	b.n	8005378 <USBD_GetDescriptor+0x2cc>
    return;
 8005376:	bf00      	nop
  }
}
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	889b      	ldrh	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d131      	bne.n	80053f6 <USBD_SetAddress+0x76>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	88db      	ldrh	r3, [r3, #6]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d12d      	bne.n	80053f6 <USBD_SetAddress+0x76>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	885b      	ldrh	r3, [r3, #2]
 800539e:	2b7f      	cmp	r3, #127	; 0x7f
 80053a0:	d829      	bhi.n	80053f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	885b      	ldrh	r3, [r3, #2]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d104      	bne.n	80053c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9a3 	bl	8005708 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c2:	e01d      	b.n	8005400 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	7bfa      	ldrb	r2, [r7, #15]
 80053c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fdf5 	bl	8005fc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa44 	bl	8005864 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ea:	e009      	b.n	8005400 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053f4:	e004      	b.n	8005400 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80053f6:	6839      	ldr	r1, [r7, #0]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f985 	bl	8005708 <USBD_CtlError>
  }
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	885b      	ldrh	r3, [r3, #2]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <USBD_SetConfig+0x148>)
 800541e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005420:	4b4b      	ldr	r3, [pc, #300]	; (8005550 <USBD_SetConfig+0x148>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d905      	bls.n	8005434 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005428:	6839      	ldr	r1, [r7, #0]
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f96c 	bl	8005708 <USBD_CtlError>
    return USBD_FAIL;
 8005430:	2303      	movs	r3, #3
 8005432:	e088      	b.n	8005546 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d002      	beq.n	8005446 <USBD_SetConfig+0x3e>
 8005440:	2b03      	cmp	r3, #3
 8005442:	d025      	beq.n	8005490 <USBD_SetConfig+0x88>
 8005444:	e071      	b.n	800552a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005446:	4b42      	ldr	r3, [pc, #264]	; (8005550 <USBD_SetConfig+0x148>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01c      	beq.n	8005488 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800544e:	4b40      	ldr	r3, [pc, #256]	; (8005550 <USBD_SetConfig+0x148>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005458:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <USBD_SetConfig+0x148>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff f948 	bl	80046f4 <USBD_SetClassConfig>
 8005464:	4603      	mov	r3, r0
 8005466:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d004      	beq.n	8005478 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f949 	bl	8005708 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005476:	e065      	b.n	8005544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f9f3 	bl	8005864 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2203      	movs	r2, #3
 8005482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005486:	e05d      	b.n	8005544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9eb 	bl	8005864 <USBD_CtlSendStatus>
      break;
 800548e:	e059      	b.n	8005544 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005490:	4b2f      	ldr	r3, [pc, #188]	; (8005550 <USBD_SetConfig+0x148>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d112      	bne.n	80054be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80054a0:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <USBD_SetConfig+0x148>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80054aa:	4b29      	ldr	r3, [pc, #164]	; (8005550 <USBD_SetConfig+0x148>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff f93b 	bl	800472c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9d4 	bl	8005864 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80054bc:	e042      	b.n	8005544 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <USBD_SetConfig+0x148>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d02a      	beq.n	8005522 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff f929 	bl	800472c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80054da:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <USBD_SetConfig+0x148>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80054e4:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <USBD_SetConfig+0x148>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff f902 	bl	80046f4 <USBD_SetClassConfig>
 80054f0:	4603      	mov	r3, r0
 80054f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00f      	beq.n	800551a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f903 	bl	8005708 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff f90e 	bl	800472c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005518:	e014      	b.n	8005544 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f9a2 	bl	8005864 <USBD_CtlSendStatus>
      break;
 8005520:	e010      	b.n	8005544 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f99e 	bl	8005864 <USBD_CtlSendStatus>
      break;
 8005528:	e00c      	b.n	8005544 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8eb 	bl	8005708 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005532:	4b07      	ldr	r3, [pc, #28]	; (8005550 <USBD_SetConfig+0x148>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	4619      	mov	r1, r3
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff f8f7 	bl	800472c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800553e:	2303      	movs	r3, #3
 8005540:	73fb      	strb	r3, [r7, #15]
      break;
 8005542:	bf00      	nop
  }

  return ret;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2000017c 	.word	0x2000017c

08005554 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d004      	beq.n	8005570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8cd 	bl	8005708 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800556e:	e023      	b.n	80055b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	dc02      	bgt.n	8005582 <USBD_GetConfig+0x2e>
 800557c:	2b00      	cmp	r3, #0
 800557e:	dc03      	bgt.n	8005588 <USBD_GetConfig+0x34>
 8005580:	e015      	b.n	80055ae <USBD_GetConfig+0x5a>
 8005582:	2b03      	cmp	r3, #3
 8005584:	d00b      	beq.n	800559e <USBD_GetConfig+0x4a>
 8005586:	e012      	b.n	80055ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3308      	adds	r3, #8
 8005592:	2201      	movs	r2, #1
 8005594:	4619      	mov	r1, r3
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f927 	bl	80057ea <USBD_CtlSendData>
        break;
 800559c:	e00c      	b.n	80055b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3304      	adds	r3, #4
 80055a2:	2201      	movs	r2, #1
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f91f 	bl	80057ea <USBD_CtlSendData>
        break;
 80055ac:	e004      	b.n	80055b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8a9 	bl	8005708 <USBD_CtlError>
        break;
 80055b6:	bf00      	nop
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d81e      	bhi.n	8005616 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	88db      	ldrh	r3, [r3, #6]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d004      	beq.n	80055ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f890 	bl	8005708 <USBD_CtlError>
        break;
 80055e8:	e01a      	b.n	8005620 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 0202 	orr.w	r2, r3, #2
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	330c      	adds	r3, #12
 800560a:	2202      	movs	r2, #2
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8eb 	bl	80057ea <USBD_CtlSendData>
      break;
 8005614:	e004      	b.n	8005620 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f875 	bl	8005708 <USBD_CtlError>
      break;
 800561e:	bf00      	nop
  }
}
 8005620:	bf00      	nop
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	885b      	ldrh	r3, [r3, #2]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d106      	bne.n	8005648 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f90e 	bl	8005864 <USBD_CtlSendStatus>
  }
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005660:	b2db      	uxtb	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	2b02      	cmp	r3, #2
 8005666:	d80b      	bhi.n	8005680 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	885b      	ldrh	r3, [r3, #2]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10c      	bne.n	800568a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8f3 	bl	8005864 <USBD_CtlSendStatus>
      }
      break;
 800567e:	e004      	b.n	800568a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f840 	bl	8005708 <USBD_CtlError>
      break;
 8005688:	e000      	b.n	800568c <USBD_ClrFeature+0x3c>
      break;
 800568a:	bf00      	nop
  }
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fabb 	bl	8004c3a <SWAPBYTE>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff faae 	bl	8004c3a <SWAPBYTE>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff faa1 	bl	8004c3a <SWAPBYTE>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	80da      	strh	r2, [r3, #6]
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fbe9 	bl	8005eec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800571a:	2100      	movs	r1, #0
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fbe5 	bl	8005eec <USBD_LL_StallEP>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d036      	beq.n	80057ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f000 f836 	bl	80057b6 <USBD_GetLen>
 800574a:	4603      	mov	r3, r0
 800574c:	3301      	adds	r3, #1
 800574e:	b29b      	uxth	r3, r3
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	701a      	strb	r2, [r3, #0]
  idx++;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	3301      	adds	r3, #1
 8005768:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	4413      	add	r3, r2
 8005770:	2203      	movs	r2, #3
 8005772:	701a      	strb	r2, [r3, #0]
  idx++;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	3301      	adds	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800577a:	e013      	b.n	80057a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	3301      	adds	r3, #1
 800578c:	613b      	str	r3, [r7, #16]
    idx++;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	3301      	adds	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	4413      	add	r3, r2
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
    idx++;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	3301      	adds	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1e7      	bne.n	800577c <USBD_GetString+0x52>
 80057ac:	e000      	b.n	80057b0 <USBD_GetString+0x86>
    return;
 80057ae:	bf00      	nop
  }
}
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80057c6:	e005      	b.n	80057d4 <USBD_GetLen+0x1e>
  {
    len++;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	3301      	adds	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f5      	bne.n	80057c8 <USBD_GetLen+0x12>
  }

  return len;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	2100      	movs	r1, #0
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fbf4 	bl	8005ffe <USBD_LL_Transmit>

  return USBD_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	2100      	movs	r1, #0
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fbe3 	bl	8005ffe <USBD_LL_Transmit>

  return USBD_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	2100      	movs	r1, #0
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fbf3 	bl	8006040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2204      	movs	r2, #4
 8005870:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005874:	2300      	movs	r3, #0
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fbbf 	bl	8005ffe <USBD_LL_Transmit>

  return USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2205      	movs	r2, #5
 8005896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800589a:	2300      	movs	r3, #0
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fbcd 	bl	8006040 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80058b4:	2200      	movs	r2, #0
 80058b6:	490e      	ldr	r1, [pc, #56]	; (80058f0 <MX_USB_DEVICE_Init+0x40>)
 80058b8:	480e      	ldr	r0, [pc, #56]	; (80058f4 <MX_USB_DEVICE_Init+0x44>)
 80058ba:	f7fe fead 	bl	8004618 <USBD_Init>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80058c4:	f7fa ffea 	bl	800089c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80058c8:	490b      	ldr	r1, [pc, #44]	; (80058f8 <MX_USB_DEVICE_Init+0x48>)
 80058ca:	480a      	ldr	r0, [pc, #40]	; (80058f4 <MX_USB_DEVICE_Init+0x44>)
 80058cc:	f7fe fed4 	bl	8004678 <USBD_RegisterClass>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80058d6:	f7fa ffe1 	bl	800089c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80058da:	4806      	ldr	r0, [pc, #24]	; (80058f4 <MX_USB_DEVICE_Init+0x44>)
 80058dc:	f7fe fef3 	bl	80046c6 <USBD_Start>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80058e6:	f7fa ffd9 	bl	800089c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80058ea:	bf00      	nop
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000108 	.word	0x20000108
 80058f4:	20000198 	.word	0x20000198
 80058f8:	2000000c 	.word	0x2000000c

080058fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	6039      	str	r1, [r7, #0]
 8005906:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2212      	movs	r2, #18
 800590c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800590e:	4b03      	ldr	r3, [pc, #12]	; (800591c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20000124 	.word	0x20000124

08005920 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	6039      	str	r1, [r7, #0]
 800592a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2204      	movs	r2, #4
 8005930:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005932:	4b03      	ldr	r3, [pc, #12]	; (8005940 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000138 	.word	0x20000138

08005944 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	6039      	str	r1, [r7, #0]
 800594e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005950:	79fb      	ldrb	r3, [r7, #7]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	4907      	ldr	r1, [pc, #28]	; (8005978 <USBD_FS_ProductStrDescriptor+0x34>)
 800595a:	4808      	ldr	r0, [pc, #32]	; (800597c <USBD_FS_ProductStrDescriptor+0x38>)
 800595c:	f7ff fee5 	bl	800572a <USBD_GetString>
 8005960:	e004      	b.n	800596c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4904      	ldr	r1, [pc, #16]	; (8005978 <USBD_FS_ProductStrDescriptor+0x34>)
 8005966:	4805      	ldr	r0, [pc, #20]	; (800597c <USBD_FS_ProductStrDescriptor+0x38>)
 8005968:	f7ff fedf 	bl	800572a <USBD_GetString>
  }
  return USBD_StrDesc;
 800596c:	4b02      	ldr	r3, [pc, #8]	; (8005978 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000468 	.word	0x20000468
 800597c:	0800617c 	.word	0x0800617c

08005980 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	4904      	ldr	r1, [pc, #16]	; (80059a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005990:	4804      	ldr	r0, [pc, #16]	; (80059a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005992:	f7ff feca 	bl	800572a <USBD_GetString>
  return USBD_StrDesc;
 8005996:	4b02      	ldr	r3, [pc, #8]	; (80059a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000468 	.word	0x20000468
 80059a4:	08006190 	.word	0x08006190

080059a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	221a      	movs	r2, #26
 80059b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80059ba:	f000 f843 	bl	8005a44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80059be:	4b02      	ldr	r3, [pc, #8]	; (80059c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	2000013c 	.word	0x2000013c

080059cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	6039      	str	r1, [r7, #0]
 80059d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d105      	bne.n	80059ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	4907      	ldr	r1, [pc, #28]	; (8005a00 <USBD_FS_ConfigStrDescriptor+0x34>)
 80059e2:	4808      	ldr	r0, [pc, #32]	; (8005a04 <USBD_FS_ConfigStrDescriptor+0x38>)
 80059e4:	f7ff fea1 	bl	800572a <USBD_GetString>
 80059e8:	e004      	b.n	80059f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	4904      	ldr	r1, [pc, #16]	; (8005a00 <USBD_FS_ConfigStrDescriptor+0x34>)
 80059ee:	4805      	ldr	r0, [pc, #20]	; (8005a04 <USBD_FS_ConfigStrDescriptor+0x38>)
 80059f0:	f7ff fe9b 	bl	800572a <USBD_GetString>
  }
  return USBD_StrDesc;
 80059f4:	4b02      	ldr	r3, [pc, #8]	; (8005a00 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000468 	.word	0x20000468
 8005a04:	080061a4 	.word	0x080061a4

08005a08 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	6039      	str	r1, [r7, #0]
 8005a12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d105      	bne.n	8005a26 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005a1e:	4808      	ldr	r0, [pc, #32]	; (8005a40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005a20:	f7ff fe83 	bl	800572a <USBD_GetString>
 8005a24:	e004      	b.n	8005a30 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4904      	ldr	r1, [pc, #16]	; (8005a3c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005a2a:	4805      	ldr	r0, [pc, #20]	; (8005a40 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005a2c:	f7ff fe7d 	bl	800572a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005a30:	4b02      	ldr	r3, [pc, #8]	; (8005a3c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000468 	.word	0x20000468
 8005a40:	080061b0 	.word	0x080061b0

08005a44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005a4a:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <Get_SerialNum+0x44>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <Get_SerialNum+0x48>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <Get_SerialNum+0x4c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	4909      	ldr	r1, [pc, #36]	; (8005a94 <Get_SerialNum+0x50>)
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 f814 	bl	8005a9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005a74:	2204      	movs	r2, #4
 8005a76:	4908      	ldr	r1, [pc, #32]	; (8005a98 <Get_SerialNum+0x54>)
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f000 f80f 	bl	8005a9c <IntToUnicode>
  }
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	1fff7a10 	.word	0x1fff7a10
 8005a8c:	1fff7a14 	.word	0x1fff7a14
 8005a90:	1fff7a18 	.word	0x1fff7a18
 8005a94:	2000013e 	.word	0x2000013e
 8005a98:	2000014e 	.word	0x2000014e

08005a9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
 8005ab2:	e027      	b.n	8005b04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	0f1b      	lsrs	r3, r3, #28
 8005ab8:	2b09      	cmp	r3, #9
 8005aba:	d80b      	bhi.n	8005ad4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	0f1b      	lsrs	r3, r3, #28
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	440b      	add	r3, r1
 8005acc:	3230      	adds	r2, #48	; 0x30
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
 8005ad2:	e00a      	b.n	8005aea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	0f1b      	lsrs	r3, r3, #28
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3237      	adds	r2, #55	; 0x37
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	011b      	lsls	r3, r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005af0:	7dfb      	ldrb	r3, [r7, #23]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	3301      	adds	r3, #1
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	4413      	add	r3, r2
 8005afa:	2200      	movs	r2, #0
 8005afc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	3301      	adds	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
 8005b04:	7dfa      	ldrb	r2, [r7, #23]
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d3d3      	bcc.n	8005ab4 <IntToUnicode+0x18>
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b3c:	d13a      	bne.n	8005bb4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	4b1e      	ldr	r3, [pc, #120]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005b5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b60:	2302      	movs	r3, #2
 8005b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005b6c:	230a      	movs	r3, #10
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	4619      	mov	r1, r3
 8005b76:	4812      	ldr	r0, [pc, #72]	; (8005bc0 <HAL_PCD_MspInit+0xa4>)
 8005b78:	f7fb f8d6 	bl	8000d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b86:	6353      	str	r3, [r2, #52]	; 0x34
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b96:	6453      	str	r3, [r2, #68]	; 0x44
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <HAL_PCD_MspInit+0xa0>)
 8005b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba0:	60fb      	str	r3, [r7, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	2043      	movs	r0, #67	; 0x43
 8005baa:	f7fb f886 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005bae:	2043      	movs	r0, #67	; 0x43
 8005bb0:	f7fb f89f 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	3728      	adds	r7, #40	; 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40020000 	.word	0x40020000

08005bc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fe fdbe 	bl	800475c <USBD_LL_SetupStage>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f7fe fdf8 	bl	8004806 <USBD_LL_DataOutStage>
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	460b      	mov	r3, r1
 8005c28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	1a9b      	subs	r3, r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3348      	adds	r3, #72	; 0x48
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	4619      	mov	r1, r3
 8005c46:	f7fe fe41 	bl	80048cc <USBD_LL_DataInStage>
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b082      	sub	sp, #8
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe ff55 	bl	8004b10 <USBD_LL_SOF>
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d001      	beq.n	8005c86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005c82:	f7fa fe0b 	bl	800089c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c8c:	7bfa      	ldrb	r2, [r7, #15]
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe feff 	bl	8004a94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe feab 	bl	80049f8 <USBD_LL_Reset>
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fefa 	bl	8004ab4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6812      	ldr	r2, [r2, #0]
 8005cce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <HAL_PCD_SuspendCallback+0x48>)
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <HAL_PCD_SuspendCallback+0x48>)
 8005ce6:	f043 0306 	orr.w	r3, r3, #6
 8005cea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe feea 	bl	8004ae0 <USBD_LL_Resume>
}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe ff38 	bl	8004ba0 <USBD_LL_IsoOUTIncomplete>
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d4a:	78fa      	ldrb	r2, [r7, #3]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fe ff00 	bl	8004b54 <USBD_LL_IsoINIncomplete>
}
 8005d54:	bf00      	nop
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fe ff3e 	bl	8004bec <USBD_LL_DevConnected>
}
 8005d70:	bf00      	nop
 8005d72:	3708      	adds	r7, #8
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe ff3b 	bl	8004c02 <USBD_LL_DevDisconnected>
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d13c      	bne.n	8005e1e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005da4:	4a20      	ldr	r2, [pc, #128]	; (8005e28 <USBD_LL_Init+0x94>)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <USBD_LL_Init+0x94>)
 8005db0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005db4:	4b1c      	ldr	r3, [pc, #112]	; (8005e28 <USBD_LL_Init+0x94>)
 8005db6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005dba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <USBD_LL_Init+0x94>)
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005dc2:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <USBD_LL_Init+0x94>)
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005dc8:	4b17      	ldr	r3, [pc, #92]	; (8005e28 <USBD_LL_Init+0x94>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005dce:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <USBD_LL_Init+0x94>)
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005dd4:	4b14      	ldr	r3, [pc, #80]	; (8005e28 <USBD_LL_Init+0x94>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <USBD_LL_Init+0x94>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005de0:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <USBD_LL_Init+0x94>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005de6:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <USBD_LL_Init+0x94>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <USBD_LL_Init+0x94>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005df2:	480d      	ldr	r0, [pc, #52]	; (8005e28 <USBD_LL_Init+0x94>)
 8005df4:	f7fb f934 	bl	8001060 <HAL_PCD_Init>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005dfe:	f7fa fd4d 	bl	800089c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	4808      	ldr	r0, [pc, #32]	; (8005e28 <USBD_LL_Init+0x94>)
 8005e06:	f7fc fa7a 	bl	80022fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005e0a:	2240      	movs	r2, #64	; 0x40
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4806      	ldr	r0, [pc, #24]	; (8005e28 <USBD_LL_Init+0x94>)
 8005e10:	f7fc fa2e 	bl	8002270 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005e14:	2280      	movs	r2, #128	; 0x80
 8005e16:	2101      	movs	r1, #1
 8005e18:	4803      	ldr	r0, [pc, #12]	; (8005e28 <USBD_LL_Init+0x94>)
 8005e1a:	f7fc fa29 	bl	8002270 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	20000668 	.word	0x20000668

08005e2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fb fa29 	bl	800129a <HAL_PCD_Start>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f930 	bl	80060b4 <USBD_Get_USB_Status>
 8005e54:	4603      	mov	r3, r0
 8005e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	4608      	mov	r0, r1
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4603      	mov	r3, r0
 8005e72:	70fb      	strb	r3, [r7, #3]
 8005e74:	460b      	mov	r3, r1
 8005e76:	70bb      	strb	r3, [r7, #2]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005e8a:	78bb      	ldrb	r3, [r7, #2]
 8005e8c:	883a      	ldrh	r2, [r7, #0]
 8005e8e:	78f9      	ldrb	r1, [r7, #3]
 8005e90:	f7fb fe0d 	bl	8001aae <HAL_PCD_EP_Open>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 f90a 	bl	80060b4 <USBD_Get_USB_Status>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fb fe56 	bl	8001b7e <HAL_PCD_EP_Close>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f8eb 	bl	80060b4 <USBD_Get_USB_Status>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f06:	78fa      	ldrb	r2, [r7, #3]
 8005f08:	4611      	mov	r1, r2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fb ff16 	bl	8001d3c <HAL_PCD_EP_SetStall>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f8cc 	bl	80060b4 <USBD_Get_USB_Status>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	4611      	mov	r1, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fb ff5b 	bl	8001e04 <HAL_PCD_EP_ClrStall>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 f8ad 	bl	80060b4 <USBD_Get_USB_Status>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da0b      	bge.n	8005f9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	1a9b      	subs	r3, r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	333e      	adds	r3, #62	; 0x3e
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	e00b      	b.n	8005fb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	1a9b      	subs	r3, r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fb fd40 	bl	8001a64 <HAL_PCD_SetAddress>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 f862 	bl	80060b4 <USBD_Get_USB_Status>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
 800600a:	460b      	mov	r3, r1
 800600c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800601c:	7af9      	ldrb	r1, [r7, #11]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	f7fb fe41 	bl	8001ca8 <HAL_PCD_EP_Transmit>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f841 	bl	80060b4 <USBD_Get_USB_Status>
 8006032:	4603      	mov	r3, r0
 8006034:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006036:	7dbb      	ldrb	r3, [r7, #22]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	460b      	mov	r3, r1
 800604e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800605e:	7af9      	ldrb	r1, [r7, #11]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	f7fb fdd5 	bl	8001c12 <HAL_PCD_EP_Receive>
 8006068:	4603      	mov	r3, r0
 800606a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	4618      	mov	r0, r3
 8006070:	f000 f820 	bl	80060b4 <USBD_Get_USB_Status>
 8006074:	4603      	mov	r3, r0
 8006076:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006078:	7dbb      	ldrb	r3, [r7, #22]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <USBD_static_malloc+0x18>)
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000180 	.word	0x20000180

080060a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]

}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80060c2:	79fb      	ldrb	r3, [r7, #7]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d817      	bhi.n	80060f8 <USBD_Get_USB_Status+0x44>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <USBD_Get_USB_Status+0x1c>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060e1 	.word	0x080060e1
 80060d4:	080060e7 	.word	0x080060e7
 80060d8:	080060ed 	.word	0x080060ed
 80060dc:	080060f3 	.word	0x080060f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]
    break;
 80060e4:	e00b      	b.n	80060fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80060e6:	2303      	movs	r3, #3
 80060e8:	73fb      	strb	r3, [r7, #15]
    break;
 80060ea:	e008      	b.n	80060fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80060ec:	2301      	movs	r3, #1
 80060ee:	73fb      	strb	r3, [r7, #15]
    break;
 80060f0:	e005      	b.n	80060fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	73fb      	strb	r3, [r7, #15]
    break;
 80060f6:	e002      	b.n	80060fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	73fb      	strb	r3, [r7, #15]
    break;
 80060fc:	bf00      	nop
  }
  return usb_status;
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <__libc_init_array>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4d0d      	ldr	r5, [pc, #52]	; (8006144 <__libc_init_array+0x38>)
 8006110:	4c0d      	ldr	r4, [pc, #52]	; (8006148 <__libc_init_array+0x3c>)
 8006112:	1b64      	subs	r4, r4, r5
 8006114:	10a4      	asrs	r4, r4, #2
 8006116:	2600      	movs	r6, #0
 8006118:	42a6      	cmp	r6, r4
 800611a:	d109      	bne.n	8006130 <__libc_init_array+0x24>
 800611c:	4d0b      	ldr	r5, [pc, #44]	; (800614c <__libc_init_array+0x40>)
 800611e:	4c0c      	ldr	r4, [pc, #48]	; (8006150 <__libc_init_array+0x44>)
 8006120:	f000 f820 	bl	8006164 <_init>
 8006124:	1b64      	subs	r4, r4, r5
 8006126:	10a4      	asrs	r4, r4, #2
 8006128:	2600      	movs	r6, #0
 800612a:	42a6      	cmp	r6, r4
 800612c:	d105      	bne.n	800613a <__libc_init_array+0x2e>
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	f855 3b04 	ldr.w	r3, [r5], #4
 8006134:	4798      	blx	r3
 8006136:	3601      	adds	r6, #1
 8006138:	e7ee      	b.n	8006118 <__libc_init_array+0xc>
 800613a:	f855 3b04 	ldr.w	r3, [r5], #4
 800613e:	4798      	blx	r3
 8006140:	3601      	adds	r6, #1
 8006142:	e7f2      	b.n	800612a <__libc_init_array+0x1e>
 8006144:	080061d8 	.word	0x080061d8
 8006148:	080061d8 	.word	0x080061d8
 800614c:	080061d8 	.word	0x080061d8
 8006150:	080061dc 	.word	0x080061dc

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <_init>:
 8006164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006166:	bf00      	nop
 8006168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616a:	bc08      	pop	{r3}
 800616c:	469e      	mov	lr, r3
 800616e:	4770      	bx	lr

08006170 <_fini>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr
